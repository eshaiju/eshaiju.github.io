<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails Kitchen]]></title>
  <link href="http://tech.eshaiju.in/atom.xml" rel="self"/>
  <link href="http://tech.eshaiju.in/"/>
  <updated>2017-10-15T01:16:21+05:30</updated>
  <id>http://tech.eshaiju.in/</id>
  <author>
    <name><![CDATA[Shaiju E]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphQL Ruby Mutation With Input Object Type]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/10/14/graphql-ruby-mutation-with-input-object-type/"/>
    <updated>2017-10-14T23:52:38+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/10/14/graphql-ruby-mutation-with-input-object-type</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <p>In the previous blog post about <a href='http://localhost:4000/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails/'>GraphQl mutation</a>, we specified each field in input as input_field. This method will do the job but it has some issues.</p>
  Consider an example mutation for saving an article. Here we used the input_field method without InputObjectType.

<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ArticleMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;AddArticle&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addArticle</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addArticle</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL mutation&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot; This article is about graphql mutation using  InputObjectType&quot;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">title</span>
</span><span class='line'>      <span class="n">body</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


For saving this we need to instantiate article object by assigning each and every input params like this.

<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

This method become ugly if our object contain lots fields.
We can define and utilize mutation input params in the better way using <strong>InputObjectType</strong>. If we can specify article object as input_field instead of each field we can save object like below.

<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">to_h</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

which is maintanable and easy to read.
Lets see how we can achive this.
<br/>
The first step is to define InputObjectType and declare that input object type as input_field. Here we are going to create InputObjectType in another folder inside our graphql folder for maintainability.


<figure class='code'><figcaption><span>app/graphql/input_objects/article_input_object_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleInputObjectType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InputObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;ArticleInput&#39;</span>
</span><span class='line'>  <span class="n">input_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">input_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Since we created new folder for <strong>input_objects</strong>, we have to tell Rails to autoload paths. place below code in <strong>application.rb</strong> to autoload it.


<figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/input_objects&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Now we can declare <strong>ArticleInputObjectType</strong> as input_field inside our mutation and use declared input_field inside our mutation resolver to save the article. So final mutation definition will look like this.


<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ArticleMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;AddArticle&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="o">!</span><span class="no">ArticleInputObjectType</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">to_h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


That&#8217;s it, we are done, now we can save new article using addArticle mutation.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addArticle</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addArticle</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL mutation&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot; This article is about graphql mutation using  InputObjectType&quot;</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">title</span>
</span><span class='line'>      <span class="n">body</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql-mutation.png" width="1200" height="260" title="" >

  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deccan RubyConf 2017 - First Experience as a Speaker]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/08/23/deccan-rubyconf-2017-first-experience-as-a-speaker/"/>
    <updated>2017-08-23T22:02:27+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/08/23/deccan-rubyconf-2017-first-experience-as-a-speaker</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
<img src="http://tech.eshaiju.in/images/decaan2.jpg" width="250" height="220">
<img src="http://tech.eshaiju.in/images/deccan3.jpg" width="225" height="200">
<img src="http://tech.eshaiju.in/images/deccan1.jpg" width="250" height="200">
  <p><a href='http://www.deccanrubyconf.org/'>Deccan RubyConference</a> is a Single-Track Conference happening at Pune every year. Deccan RubyConf 2017 took place 12th Aug. 2017 at Sheraton Grand Pune. The conference covered areas like Ruby Language, Framework, and Tools by well-known speakers and also few first-time speakers from Ruby community.</p>

 I got a chance to attend This year edition as speaker. My topic was <strong><a href='http://slides.com/shaijunonu/graphql-8'>Give REST a rest, use GraphQL for your next Ruby API</a></strong>. In my 25 minutes session, I talked about why should we use GraphQL and also about its implementation in Ruby. After conference session few people from different companies approached me and asked about GraphQL which was really a confidence booster for me as a speaker. Few people shared the issues they faced in GraphQL which given me new ideas and thought process.
<img src="http://tech.eshaiju.in/images/conftalk1.jpg" width="800" height="260" title="Shaiju E" >
<br/>
<p>
The conference started with the keynote by <strong><a href='https://twitter.com/timriley'>Tim Riley</a></strong>. Tim is from Australian and partner at Australian design agency Icelab. He talked about next generation Ruby web apps with dry-rb. Next talk was about leveraging the hidden powers of a database to make Rails, the swiss army knife of web development, manipulate and present data faster by <strong><a href='https://twitter.com/coderhs'>Harisankar</a></strong>, founder of Red Panthers. <strong><a href='https://twitter.com/_tachyons'>Aboobacker MK</a></strong> from Red Panthers talked about Garbage collector in Ruby and some practical tips to improve Ruby performance.</p>
<img src="http://tech.eshaiju.in/images/tim.jpg" width="250" height="250" title="Tim Riley" >
<img src="http://tech.eshaiju.in/images/hari.jpg" width="250" height="200" title="Harisankar" >
<img src="http://tech.eshaiju.in/images/aboobacker.jpg" width="250" height="250" title="Aboobacker MK" >

<p>
After my session, <strong><a href='https://twitter.com/_kanuahs'>Shaunak Pagnis</a></strong> from Amura talked about the Active record and beyond.  After Lunch <strong><a href='https://twitter.com/citizen428'>Michael Kohl</a></strong> from Austria, currently, serves as CTO of Lockstap Labs talked about writing maintainable Rails applications. The sixth session was a panel discussion with the panels including <strong><a href='https://twitter.com/AjeyGore'>Ajey Gore</a></strong> - Group CTO of Go-Jek, <strong><a href='https://twitter.com/vipulnsward'>Vipul</a></strong> - Director BigBinary, Tim Riley, Michael Kohl, <strong><a href='https://twitter.com/gautamrege'>Gautam Rege</a></strong> -Director Josh Software discussed their experience of building a start-up and hiring strategies.
</p>
<img src="http://tech.eshaiju.in/images/shaunak.jpg" width="250" height="200" title="Shaunak Pagnis" >
<img src="http://tech.eshaiju.in/images/Kohl.jpg" width="250" height="200" title="Michael Kohl" >
<img src="http://tech.eshaiju.in/images/panel.jpg" width="250" height="200">
<p>
Followed by Panel Discussion, there were 9 flash talks which included 5 speakers from Kerala, talked about different ruby topics from beginner level to advanced level.  After flash talks, <strong><a href='https://twitter.com/Mistcrafter'>Douglas Vaz</a></strong> talked about HTTP/2 World. Conference session ended with Keynote by Ajey Gore. He talked about testing principles and why testing is important.</p>
<img src="http://tech.eshaiju.in/images/ft1.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft2.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft3.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft4.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft5.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft6.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft7.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft8.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/ft9.jpg" width="250" height="200">
<img src="http://tech.eshaiju.in/images/vaz.jpg" width="250" height="200" title="Douglas Vaz" >
<img src="http://tech.eshaiju.in/images/ajay.jpg" width="250" height="200" title="Ajay Gore" >
<p>
After sessions, there were Open hours which gave opportunity meet and interact with different kind of people. For me, it was a great learning experience both listening to people share their contributions and ideas which really inspired me to code better and learn better.</p>
All the photos from the conference is available <a href='https://photos.google.com/share/AF1QipP3Iw5g6YH6MRQnK_kkpXsfRrrJ0J_3VgNX89mifOJp54b6DxJSkOL0BTJAZ9C5yA?key=YjAyR0pGZ3hoZUh1SExPNXJxUk1OV1hhQkx6bjdB'>here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQl Security Issues and Solutions]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/08/05/graphql-security-issues-and-solutions/"/>
    <updated>2017-08-05T12:49:42+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/08/05/graphql-security-issues-and-solutions</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>One of the main highlights of GraphQl is declarative fetching, the client can define the shape of the data he needed and GraphQL server will provide data in the same shape. But an evil client can exploit this advantage to make deeper nesting and complex queries and can do DDoS attack.<p>
    Example for a deeper nesting query:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">articles</span><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">body</span>
</span><span class='line'>    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span>
</span><span class='line'>      <span class="n">user</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>          <span class="n">user</span><span class="p">{</span>
</span><span class='line'>            <span class="n">comments</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="n">comment</span>
</span><span class='line'>              <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">comment</span>
</span><span class='line'>                  <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>                      <span class="n">comment</span>
</span><span class='line'>                      <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                        <span class="nb">name</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

GraphQL provide three confirations to avoid this issue. <br/><br/>

<strong>Timeout:</strong>
We can avoid queries utilizing server more than specified time by setting a timeout. If a query takes more time for execute, then after time out GraphQL will return the result of query up to that time and simply reject nonexcecuted part of the query.

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">GraphqlRubySampleSchema</span><span class="o">.</span><span class="n">middleware</span> <span class="o">&lt;&lt;</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">::</span><span class="no">TimeoutMiddleware</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">max_seconds</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">err</span><span class="p">,</span> <span class="n">query</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;GraphQL Timeout: </span><span class="si">#{</span><span class="n">query</span><span class="o">.</span><span class="n">query_string</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql-timeout.png" width="1200" height="260" title="" >
<img src="http://tech.eshaiju.in/images/graphql-timeout-1.png" width="1200" height="260" title="" >

<strong>Maximum Depth:</strong> Another solution for prevent deeply-nested queries is setting <strong>max_deplth</strong>. If our query depth is greater than max_depth we set, the server will simply reject full query and return an error message.

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">max_depth</span> <span class="mi">12</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql-maxdepth.png" width="1200" height="260" title="" >
<strong>Query Complexity:</strong> We can prevent complex queries by setting <strong>max_complexity</strong> in GraphQL schema. Each field in our type system has a complexity number so if our query complexity exceeds max_complexity, the server will reject query just like in the case of max_depth.

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">max_depth</span> <span class="mi">12</span>
</span><span class='line'>  <span class="n">max_complexity</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql-maxcomplexity2.png" width="1200" height="260" title="" >
<img src="http://tech.eshaiju.in/images/graphql-maxcomplexity1.png" width="1200" height="260" title="" >
<p>By default complexity of field is 1, but we can configure constant complexity for fields in type system and also can set complexity dynamically by passing conditions </p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Constant complexity:</span>
</span><span class='line'><span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Dynamic complexity:</span>
</span><span class='line'><span class="n">field</span> <span class="ss">:top_comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:limit</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">default_value</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>  <span class="n">complexity</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">child_complexity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">ctx</span><span class="o">[</span><span class="ss">:current_user</span><span class="o">].</span><span class="n">admin?</span>
</span><span class='line'>      <span class="c1"># no limit for admin users</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># `child_complexity` is the value for selections</span>
</span><span class='line'>      <span class="c1"># which were made on the items of this list.</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>      <span class="c1"># We don&#39;t know how many items will be fetched because</span>
</span><span class='line'>      <span class="c1"># we haven&#39;t run the query yet, but we can estimate by</span>
</span><span class='line'>      <span class="c1"># using the `limit` argument which we defined above.</span>
</span><span class='line'>      <span class="n">args</span><span class="o">[</span><span class="ss">:limit</span><span class="o">]</span> <span class="o">*</span> <span class="n">child_complexity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRY GraphQL Definitions Using Interfaces]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/06/09/dry-graphql-definitions-using-interfaces/"/>
    <updated>2017-06-09T11:10:47+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/06/09/dry-graphql-definitions-using-interfaces</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <p>We can make GraphQL Types and mutations DRY using interfaces. An Interface is an abstract type that contains a collection of types which implement some of the same fields. We can avoid specifying the same set of fields in different GraphQL Types and mutations by defining an interface and using in sharing Types and mutations.</p>
<p>Interfaces can have fields, defined with a field, just like a GraphQL object type. Objects which implement this field inherit field definitions from the interface. An object type can override the inherited definition by redefining that field.</p>
<p>For example, active record time stamps are common fields in Rails models. So we can avoid declaring these fields in all object types by declaring an interface <strong>ActiveRecordTimestamp</strong> with these fields and using it our object types.</p>
We can define ActiveRecordTimestamp like this.


<figure class='code'><figcaption><span>app/graphql/interfaces/active_record_timestamp.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActiveRecordTimestamp</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InterfaceType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;ActiveRecordTimestamp&#39;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:createdAt</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="ss">property</span><span class="p">:</span> <span class="ss">:created_at</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updatedAt</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="ss">property</span><span class="p">:</span> <span class="ss">:updated_at</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


Since we created a new folder for interfaces, we have to tell Rails to autoload paths. Place below code in application.rb to autoload it.

<figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/interfaces&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


Now we can add defined interfaces in our object Type using <strong>interfaces</strong> keyword.


<figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">interfaces</span> <span class="o">[</span><span class="no">ActiveRecordTimestamp</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


Example for including multiple interfaces in Ruby object type.


<figure class='code'><figcaption><span>app/graphql/types/comment_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">CommentType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># multiple interfaces included using comma.</span>
</span><span class='line'>  <span class="n">interfaces</span> <span class="o">[</span><span class="no">ActiveRecordTimestamp</span><span class="p">,</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Node</span><span class="o">.</span><span class="n">interface</span><span class="o">]</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:user</span><span class="p">,</span> <span class="no">UserType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


Now, this active record time stamp will be available in both above-mentioned object types.

<p>We can use return_interfaces to define and reuse return types in different mutation definitions. The result of the resolve block will be passed to the field definitions in the interfaces, and both interface-specific and mutation-specific fields will be available to clients.</p>

For example, we can define a interface which will define notification of a mutation.

<figure class='code'><figcaption><span>app/graphql/interfaces/mutation_result.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationResult</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InterfaceType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;MutationResult&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:success</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">Boolean</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:notice</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">ValidationError</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="no">CreateArticle</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">return_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">return_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">return_interfaces</span> <span class="o">[</span><span class="no">MutationResult</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># clientMutationId will also be available automatically</span>
</span><span class='line'>  <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">,</span> <span class="n">notice</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">create_with_input</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">success</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>      <span class="ss">notice</span><span class="p">:</span> <span class="n">notice</span>
</span><span class='line'>      <span class="ss">title</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>      <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

   </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQL Ruby Error Handling]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/31/graphql-ruby-error-handling/"/>
    <updated>2017-05-31T23:07:58+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/31/graphql-ruby-error-handling</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>GraphQL endpoints, we can expose errors as part of our schema. We should check <strong>errors</strong> fields to see if any errors in result data. For example if we query a field which is not existing in type system, we will get a error response. This type of errors is not supposed to be displayed to end users. It helps with debugging, error tracking etc.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;errors&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Field &#39;user&#39; doesn&#39;t exist on type &#39;Article&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;locations&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;line&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;column&quot;</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fields&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;query&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;article&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;user&quot;</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

If a field&#8217;s resolve function returns an ExecutionError, the error will be inserted into the response&#8217;s <strong>errors</strong> key and the field will resolve to nil. It is often required to perform additional validation of the input parameters passed to GraphQL mutations, and provide user-friendly error messages in case validation fails or mutation cannot be completed successfully.
<br/>
For example, we could add errors to ArticleType:

<figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="n">obj</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Then, when clients create a article, they should check the errors field to see if it was successful:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">createArticle</span><span class="p">(</span><span class="ss">article</span><span class="p">:</span> <span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL is Nice&quot;</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">errors</span> <span class="c1"># in case the save failed</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

If errors are present (and id is null), the client knows that the operation was unsuccessful, and they can discover reason. If some part of our resolve function would raise an error, we can rescue it and add to the <strong>errors</strong> key by returning a GraphQL:: ExecutionError

<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">article_params</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="s2">&quot;article&quot;</span><span class="o">].</span><span class="n">to_h</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># on success, return the article:</span>
</span><span class='line'>    <span class="n">article</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span> <span class="o">=&gt;</span> <span class="n">err</span>
</span><span class='line'>    <span class="c1"># on error, return an error:</span>
</span><span class='line'>    <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ExecutionError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Invalid input for Article: </span><span class="si">#{</span><span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


If we don&#8217;t want to <strong>begin &#8230; rescue &#8230; end</strong> in every field, we can wrap resolve functions in error handling.<br/> For example, we could make an object that wraps another resolver:


<figure class='code'><figcaption><span>app/graphql/resolvers/rescue_form.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Wrap field resolver `resolve_func` with a handler for `error_superclass`.</span>
</span><span class='line'><span class="c1"># `RescueFrom` instances are valid field resolvers too.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RescueFrom</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">error_superclass</span><span class="p">,</span> <span class="n">resolve_func</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@error_superclass</span> <span class="o">=</span> <span class="n">error_superclass</span>
</span><span class='line'>    <span class="vi">@resolve_func</span> <span class="o">=</span> <span class="n">resolve_func</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@resolve_func</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="vi">@error_superclass</span> <span class="o">=&gt;</span> <span class="n">err</span>
</span><span class='line'>    <span class="c1"># Your error handling logic here:</span>
</span><span class='line'>    <span class="c1"># - return an instance of `GraphQL::ExecutionError`</span>
</span><span class='line'>    <span class="c1"># - or, return nil:</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

apply it to fields on an opt-in basis:

<figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">field</span> <span class="ss">:create_article</span><span class="p">,</span> <span class="no">ArticleType</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Wrap the resolve function with `RescueFrom.new(err_class, ...)`</span>
</span><span class='line'>  <span class="n">resolve</span> <span class="no">RescueFrom</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<br/>
Reference: <a href='http://graphql-ruby.org/'>GraphQL Ruby website</a>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQL -Mutation Query Implementation - Ruby on Rails]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails/"/>
    <updated>2017-05-15T17:37:28+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p><strong>Mutation</strong> is a special type of query used to change data in the database like Creating, Editing or Deleting Records from a table or Store. These are the equivalent to the POST, PUT, PATCH and DELETE in HTTP/REST speak. Defining mutations is very similar to defining queries. The only difference is how you implement the logic inside the mutation. In mutation, we can control and specify the output data that API need to return after mutation procedure.</p>
    <p>In this article, I am Adding a mutation query to add comments to an article which we discussed in <a href="http://tech.eshaiju.in/blog/2017/05/09/solving-n-plus-1-query-in-graphql-using-graphql-batch/">previous example</a>.</p>
    To add mutations to your GraphQL schema, first we need to define a mutation type in mutations folder
    
<figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Now we need to pass it into the schema

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Like QueryType, MutationType is a root of the schema. Members of MutationType are mutation fields. For GraphQL in general, mutation fields are identical to query fields except that they have side-effects (which mutate application state, eg, update the database).<br/><br/>
Since we created new folder for mutations, we have to tell Rails to autoload paths. Put below code in application.rb to autoload it.

<figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/mutations&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

  <p>Now we need to define specific mutation query. Following are the process to define a mutation<br />- give operation a name <br />- declare its inputs<br />- declare its outputs<br />- declare the mutation procedure in resolve block.<br /> <strong>resolve</strong> should return a hash with a key for each of the <strong>return_fields</strong></p>
  In out example, we need to define <strong>CommentMutations</strong> in mutations folder.
  
<figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;AddComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:articleId</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Article not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comments</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">new_comment</span> <span class="o">=</span> <span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:userId</span><span class="o">]</span><span class="p">,</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:comment</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

    Here <strong>input_field</strong> specify the input params we can pass in the query. In <strong>return_field</strong>, we can specify the fields returning after the update. Inside resolve block, we define the business logic. and <strong>resolve</strong> should return a hash with a key for each of the return_fields.<br/><br/>
    After defining this, we need to add the mutation&#8217;s derived field to the mutation type.

<figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


Now we can try this mutation in GraphiQL:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addComment</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">comment</span><span class="p">:</span> <span class="s2">&quot;New comment&quot;</span><span class="p">,</span> <span class="ss">articleId</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">userId</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>        <span class="n">user</span><span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Here’s a possible JSON response for that query:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;addComment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;article&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Good article&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Keep going&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New Comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 2&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;TEST&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

We can call the same query by passing inputs using variables

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addComment</span><span class="p">(</span><span class="vg">$comments</span><span class="p">:</span> <span class="no">AddCommentInput</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>  <span class="n">addComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="vg">$comments</span><span class="p">){</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>        <span class="n">user</span><span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Query</span> <span class="no">Variabbles</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New comment1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;articleId&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;userId&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<strong>$comments: AddCommentInput!</strong> will configure the variable <strong>$comments</strong> to take values from <strong>query variables</strong> section. <strong>input: $comments</strong> will pass $comments as input to mutation query.</p>
<img src="http://tech.eshaiju.in/images/mutation.png" width="1200" height="260" title="" >

Lets write another example for updation mutation. If we want to update a comment, we need to write UpdateComment mutation in comment_mutations.rb


<figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;AddComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:articleId</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Article not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comments</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">new_comment</span> <span class="o">=</span> <span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:userId</span><span class="o">]</span><span class="p">,</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:comment</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Update</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;UpdateComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="no">CommentType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Comment not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">valid_inputs</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@original_values</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">comment</span><span class="o">.</span><span class="n">respond_to?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">underscore</span> <span class="p">})</span><span class="o">.</span><span class="n">except</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">valid_inputs</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">comment</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Main defference here is, we need to create <strong>valid_inputs</strong>. This will allow us mass assignment with update attributes with valied fields which we passed.<br/><br/>
After defining this, we need to add the mutation&#8217;s derived field to the mutation type.

<figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updateComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Update</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


Mutation for delete a comment and return post and deleted comment ID

<figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Destroy</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;DestroyComment&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="s1">&#39;Delete a comment and return post and deleted comment ID&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:deletedId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">_obj</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Comment not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">article</span>
</span><span class='line'>      <span class="n">comment</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">reload</span><span class="p">,</span> <span class="ss">deletedId</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Other mutations defined here....</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updateComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Update</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:destroyComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Destroy</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Now we can try this mutation in GraphiQL:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">destroyComment</span><span class="p">(</span><span class="vg">$comment</span><span class="p">:</span> <span class="no">DestroyCommentInput</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>  <span class="n">destroyComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="vg">$comment</span><span class="p">){</span>
</span><span class='line'>    <span class="n">errors</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="nb">id</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Query</span> <span class="no">Variabbles</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphiQL IDE Alternatives for Development/Testing/Exploring GraphQL Servers]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/11/graphiql-ide-alternativs-for-development-testing-exploring-graphql-servers/"/>
    <updated>2017-05-11T20:17:26+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/11/graphiql-ide-alternativs-for-development-testing-exploring-graphql-servers</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p><a href='https://github.com/graphql/graphiql'>GraphiQL</a> is a graphical interactive in-browser GraphQL IDE. This is a great tool for testing GraphQL endpoints and also for Exploring documentation about GraphQL Servers. There are some limitations for default GraphiQL tool, It does not provide any option for saving queries like we have in postman and other API clients. It only saves the latest query in local storage. Another issue with GraphiQL is, it not providing any option for pass headers into GraphQL queries. It is very critical for the testing of application which needs to pass auth-token or some other headers. In this post Iam exploring few alternativs.</p>
    <strong>GraphQL IDE</strong>
    <p><a href='https://github.com/redound/graphql-ide'>GraphQL IDE</a> is n extensive IDE for exploring GraphQL API&#8217;s. It allows manage projects, import/export, store queries, toggle query history, passing custom headers and setting environment variables for dynamic headers. Currently, it is only available for MacOS. Window / Linux version of this application is under development but can build the binary. If you have Homebrew installed on OSX, you can install it by:</p>
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew cask install graphql-ide</span></code></pre></td></tr></table></div></figure>

    Execute queries
    <img src="http://tech.eshaiju.in/images/graphql-ide-1.png" width="1200" height="260" title="" >
    Custom headers
    <img src="http://tech.eshaiju.in/images/graphql-ide-2.png" width="1200" height="260" title="" >
    Environment variables for dynamic headers
    <img src="http://tech.eshaiju.in/images/graphql-ide-3.png" width="1200" height="260" title="" >
    Manage projects
    <img src="http://tech.eshaiju.in/images/graphql-ide-4.png" width="1200" height="260" title="" >
    <br/>
    <strong>GraphiQL.app</strong>
    <p><a href='https://github.com/skevy/graphiql-app'>GraphiQL.app</a> is light, Electron-based wrapper around GraphiQL. This Provides a tabbed interface for editing and testing GraphQL queries/mutations with GraphiQL. It is only available for MacOS. If you have Homebrew installed on OSX, you can install it by:</p>
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew cask install graphiql</span></code></pre></td></tr></table></div></figure>

    <img src="http://tech.eshaiju.in/images/graphiql-app.png" width="1200" height="260" title="" >
    <br/>
    <strong>GraphiQL Feen(Chrome Extension)</strong>
    <p><a href='https://chrome.google.com/webstore/detail/graphiql-feen/mcbfdonlkfpbfdpimkjilhdneikhfklp'>GraphiQL Feen</a> is a Chrome Extension that allows you to explore and test GraphQL endpoints. It utilizes the Popular GraphiQL component. It</p>
    <p>Features are: <br /> Save/Load Queries and variables to build a library of useful queries.<br />* Save/Select Server Definitions so you can have different settings for different servers.<br />* GET/POST/Multi-part GraphQL requests supported!<br /> * Authorization defined so cookies forwarded to the domain<br />* Define Headers that will be sent with the request, Headers can even override existing Request headers:<br /> * Define the Origin: header for CORS requests to allow your server to process correctly.<br /> * Define CSRF token headers<br /> * Override all Cookies so you can pass authentication information with your requests.<br />* EXPORT your entire application state to a JSON file<br />* IMPORT saved state so you can restore your state </p>
    <img src="http://tech.eshaiju.in/images/graphql-feen.png" width="1200" height="260" title="" >
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving N+1 Query in GraphQL Using Graphql-batch]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/09/solving-n-plus-1-query-in-graphql-using-graphql-batch/"/>
    <updated>2017-05-09T23:40:03+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/09/solving-n-plus-1-query-in-graphql-using-graphql-batch</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>One of the most important pain points in GraphQL is the problem thats commonly referred to as N+1 SQL queries. GraphQL query fields are designed to be stand-alone functions, and resolving those fields with data from a database might result in a new database request per resolved field.</p>
    <p>For a simple RESTful API endpoint logic, it&#8217;s easy to analyze, detect, and solve N+1 issues by enhancing the constructed SQL queries. For GraphQL dynamically resolved fields, it&#8217;s not that simple.</p>
    For example, Consider the GraphQL query to fetch article, its comments and commented user which I mentioned in <a href="http://tech.eshaiju.in/blog/2017/05/08/graphql-server-nested-query-implemenation-example-in-ruby-on-rails/">previous post</a>.
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">acticle</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span>
</span><span class='line'>      <span class="n">user</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">id</span>
</span><span class='line'>        <span class="nb">name</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Output Response

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;acticle&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;A GraphQL Server&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Good article&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Keep going&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New Comment&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 2&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;TEST&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql_before.png" width="1200" height="260" title="" >
This will fire user query in for each comment. Total 7 instead of 1 for fetch 2 user. In Rest API we can solve this issue by eager loading users while fetching comments. But GraphQL query fields are designed to be stand-alone functions, and not aware of other functions.
<p>Facebook introduced DataLoader to solve this problem in Javascript projects. Shopify created <a href='https://github.com/Shopify/graphql-batch' >GraphQL::Batch</a> to solve this N+1 problem in ruby.<br />GraphQL::Batch Provides an executor for the graphql gem which allows queries to be batched. This is a flexible toolkit for lazy resolution with GraphQL.</p>
Installation

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;graphql-batch&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Now we need to define a custom loader, which is initialized with arguments that are used for grouping and a perform method for performing the batch load.

<figure class='code'><figcaption><span>app/graphql/record_loader.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;graphql/batch&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RecordLoader</span> <span class="o">&lt;</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Batch</span><span class="o">::</span><span class="no">Loader</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@model</span> <span class="o">=</span> <span class="n">model</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@model</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">ids</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">record</span><span class="o">|</span> <span class="n">fulfill</span><span class="p">(</span><span class="n">record</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">ids</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="n">fulfill</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span> <span class="k">unless</span> <span class="n">fulfilled?</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Now we need to GraphQL::Batch as a plugin in your schema

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="ss">Types</span><span class="p">:</span><span class="ss">:QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="ss">Mutations</span><span class="p">:</span><span class="ss">:MutationType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">use</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Batch</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

In our comments api example, we need to use above initialized RecordLoader for lazily execute User query

<figure class='code'><figcaption><span>app/graphql/types/comment_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Types</span>
</span><span class='line'>  <span class="no">CommentType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:user</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">UserType</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="no">RecordLoader</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Here,  <strong>resolve -&gt; (obj, args, ctx) {RecordLoader.for(User).load(obj.user_id) }</strong> will make user fetching lazy loading there by solve N+1 query problem.
<img src="http://tech.eshaiju.in/images/graphql_example.png" width="1200" height="260" title="" >
Before:
<img src="http://tech.eshaiju.in/images/graphql_before.png" width="1200" height="260" title="" >
After
<img src="http://tech.eshaiju.in/images/graphql_after.png" width="1200" height="260" title="" >
<p>More information about GraphQL::Batch is available in <a href='https://github.com/Shopify/graphql-batch' >Gem Documentation</a><br/>
You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.</p>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQL Server - Nested Query Implementation Example in Ruby on Rails]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/08/graphql-server-nested-query-implemenation-example-in-ruby-on-rails/"/>
    <updated>2017-05-08T21:28:51+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/08/graphql-server-nested-query-implemenation-example-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>One of the main advantages of GraphQL is, we can create queries with a different combination of datasets which will avoid multiple requests to fetch required data, thereby eliminating overheads. In this post, I am discussing how we can create nested datasets in GraphQL.

    <br /> <br />
    In the <a href="http://tech.eshaiju.in/blog/2017/05/06/a-graphql-server-implementation-ruby-on-rails/">previous post</a>, I mentioned about Article model and query to fetch an article. Here I&#8217;m going to fetch comments under the article. Assuming we have comments and user model with corresponding associations.</p>

    Now we need to add CommentType.
    
<figure class='code'><figcaption><span>app/graphql/types/comment_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">CommentType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:user</span><span class="p">,</span> <span class="no">UserType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


    Here we are exposing commented user which is UserType. So we need to define that type also in user_type.rb
    
<figure class='code'><figcaption><span>app/graphql/types/user_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">UserType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


    Now we need to expose comments inside article model
    
<figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

    <p>Here comments are an array of objects so we need to specify CommentType using <strong>types</strong> keyword. We can see in comment_type.rb we are not specifying types for UserType, as it is returning a single object. Since we defined association in, This will fetch all comments of the article by executing article.comments.</p>
Put below code in application.rb to autoload graphql and types folder like so:

<figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/types&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


    Here&rsquo;s an example of a GraphQL query that a client can use to ask a server about the title of the article, corresponding comments and commented user:
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">article</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span>
</span><span class='line'>      <span class="n">user</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">id</span>
</span><span class='line'>        <span class="nb">name</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

    Here’s a possible JSON response for that query:
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;article&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;A GraphQL Server&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Good article&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Keep going&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

    You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A GraphQL Server Implementation - Ruby on Rails]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/06/a-graphql-server-implementation-ruby-on-rails/"/>
    <updated>2017-05-06T14:55:58+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/06/a-graphql-server-implementation-ruby-on-rails</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <p><a href="http://graphql.org/">GraphQL </a>is a query language for APIs developed by the Facebook team. This language gives clients the power to ask for exactly what they need and nothing more makes it easier to evolve APIs over time and enables powerful developer tools. Facebook open sourced it in 2015.</p>
  <div class="graphiqlVid">
    <video autoplay="" loop="" playsinline="" style="margin-bottom: 0px;">
      <source src="http://graphql.org/img/graphiql.mp4?x" type="video/mp4">
    </video><small>video courtesy: <a href="http://graphql.org/">graphql.org</a></small>
  </div>
<br/>
<p>A GraphQL request can be either <strong>a query</strong> (read operation) or <strong>a mutation </strong>(write operation). For both cases, the request is a simple string that a GraphQL service can interpret, execute, and resolve with data in a specified format.</p>

<strong>Main features of GraphQL are:</strong> <br/><br/>

<strong>Retrieve only the data your client needs in a single request - No over-fetching:</strong> <br/>
<p>Send a GraphQL query to your API with the fields you want to fetch and get only that set of fields in return. Apps using GraphQL are fast and stable because they control the data they get, not the server.</p>

<strong>Get many resources in a single round-trip:</strong>
<p>We can create queries with a different combination of datasets which will avoid multiple requests to fetch required data, thereby eliminating overheads.</p>

<strong>Describe what’s possible with a type system:</strong>
<p>GraphQL APIs have a single endpoint and it organizes API with requesting types and fields.</p>

<strong>Evolve your API without versions - maintainability:</strong>
<p>Add new fields and types to your GraphQL API without impacting existing queries. Aging fields can be deprecated and hidden from tools. By using a single evolving version, GraphQL APIs give apps continuous access to new features and encourage cleaner, more maintainable server code.</p>

<strong>GraphQL Queries:</strong>

<p>Here’s an example of a GraphQL query that a client can use to ask a server about the name and email of user #1:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">user</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">firstName</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lastName</span><span class="p">,</span>
</span><span class='line'>    <span class="n">email</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Here’s a possible JSON response for that query:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;firstName&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;lastName&quot;</span><span class="p">:</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;eshaiju@gmail.com&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<strong>GraphQL server implementation in Ruby On Rails Application</strong>

<p>Here we are assuming, we have an existing ROR application with model Article and fields title and body.</p>
You can install graphql from RubyGems by adding to your application’s Gemfile:

<figure class='code'><figcaption><span>Gemfile</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Gemfile
</span><span class='line'>gem "graphql"
</span><span class='line'>gem 'graphiql-rails', group: :development</span></code></pre></td></tr></table></div></figure>

Then, run bundle install.<br/><br/>
Now you can get started with a few GraphQL generators:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g graphql:install</span></code></pre></td></tr></table></div></figure>


This will:
<ul><li>Set up a folder structure in app/graphql/</li>
<li>Add schema definition</li>
<li>Add a query type definition</li>
<li>Add a route and controller for executing queries</li>

After installing you can see your new schema by:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>rails server
</span><span class='line'>open localhost:3000/graphiql</span></code></pre></td></tr></table></div></figure>

After this, you can build a GraphQL server by hand or GraphQL generators
<p>Here  I am building by hand.</p>

Define some types:  Add article_type.rb in &#8216;types&#8217; folder which will define ArticleType

<figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Now we need to build schema, which is what we use to query

<figure class='code'><figcaption><span>app/graphql/types/query_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">QueryType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Query&quot;</span>
</span><span class='line'>  <span class="n">description</span> <span class="s2">&quot;The query root of this schema&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:article</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">argument</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">description</span> <span class="s2">&quot;Find a Article by ID&quot;</span>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="s2">&quot;id&quot;</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

This will query article by accepting ID as argument

Then, build a schema with QueryType as the query entry point:

Add following in  graphql_ruby_sample_schema.rb

<figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Since, we created new folders we have to tell Rails to autoload paths. Put below code in application.rb to autoload graphql and types folder like so:

<figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/types&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

This schema is ready to serve GraphQL queries!. play around this query in GraphiQL.

<br/><br/>Here’s an example of a GraphQL query that a client can use to ask a server about the title  of article #1:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">article</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Here’s a possible JSON response for that query:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;article&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;A GraphQL Server&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<img src="http://tech.eshaiju.in/images/graphql_query.png" width="1200" height="260" title="" >
You can execute queries from a query string:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query_string</span> <span class="o">=</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2">  article(id: 1) {</span>
</span><span class='line'><span class="s2">    id</span>
</span><span class='line'><span class="s2">    title</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">}&quot;</span>
</span><span class='line'><span class="n">result_hash</span> <span class="o">=</span> <span class="no">GraphqlRubySampleSchema</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="ss">output</span><span class="p">:</span>
</span><span class='line'><span class="c1"># {</span>
</span><span class='line'><span class="c1">#   &quot;data&quot; =&gt; {</span>
</span><span class='line'><span class="c1">#     &quot;article&quot; =&gt; {</span>
</span><span class='line'><span class="c1">#        &quot;id&quot; =&gt; 1,</span>
</span><span class='line'><span class="c1">#        &quot;title&quot; =&gt; &quot;A GraphQL Server&quot;</span>
</span><span class='line'><span class="c1">#     }</span>
</span><span class='line'><span class="c1">#   }</span>
</span><span class='line'><span class="c1"># }</span>
</span></code></pre></td></tr></table></div></figure>

You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed_job_web - a Resque Inspired Interface for Delayed_job]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/01/19/delayed-job-web-web-interface-for-monitor-delayed-job/"/>
    <updated>2017-01-19T10:34:55+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/01/19/delayed-job-web-web-interface-for-monitor-delayed-job</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <a href="https://github.com/ejschmitt/delayed_job_web">delayed_job_web</a> is a gem which will provide the <a href="https://github.com/resque/resque">Resque</a> inspired interface for delayed_job. This gem will provide a nice interface for monitor all activities in delayed jobs instead of searching it in the database directly.
  <br/>
   <strong>Some features: </strong>
  <br/>
  <ul style="padding-left: 5%;">
    <li>Easily view jobs enqueued, working, pending, and failed.</li>
    <li>Queue any single job. or all pending jobs, to run immediately.</li>
    <li>Remove a failed job, or easily remove all failed jobs.</li>
    <li>Watch delayed_job operation with live ajax polling.</li>
    <li>Filter delayed_jobs by queue name.</li>
  </ul>
  <strong>Quick Start For Rails 5 Applications:</strong>
  <br/><br/>
  Add the dependency to your Gemfile and bundle it.

  
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'delayed_job_web'
</span><span class='line'>
</span><span class='line'># For dependency resolution of 'delayed_job_web' gem
</span><span class='line'># More info - https://github.com/ejschmitt/delayed_job_web/issues/84
</span><span class='line'>gem 'rack-protection', github: 'sinatra/sinatra'
</span><span class='line'>gem 'sinatra', github: 'sinatra/sinatra'</span></code></pre></td></tr></table></div></figure>


  <img src="http://tech.eshaiju.in/images/delayed_job_web.png" width="1200" height="260" title="" >
  <br/>
  Add the following route to your application for accessing the interface, and retrying failed jobs.
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get '/delayed_job' => DelayedJobWeb, :anchor => false
</span><span class='line'>put '/delayed_job' => DelayedJobWeb, :anchor => false
</span><span class='line'>post '/delayed_job' => DelayedJobWeb, :anchor => false</span></code></pre></td></tr></table></div></figure>


You can authenticate web interface by adding something like this,


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>authenticate :user, ->(u) { u.super_admin? } do
</span><span class='line'>  get '/delayed_job' => DelayedJobWeb, :anchor => false
</span><span class='line'>  put '/delayed_job' => DelayedJobWeb, :anchor => false
</span><span class='line'>  post '/delayed_job' => DelayedJobWeb, :anchor => false
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

now web interface will be available only for super admin login.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profile API Endpoints Using Rack-mini-profiler]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/02/25/profile-api-endpoints-using-rack-mini-profiler/"/>
    <updated>2016-02-25T13:54:28+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/02/25/profile-api-endpoints-using-rack-mini-profiler</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
        <a href='https://github.com/MiniProfiler/rack-mini-profiler'>rack-mini-profiler</a> is a great tool for fine tuning our Ruby on Rails application. This gem will show all information about the queries in the web page we are loading. By checking this list, we can understand which part of our code takes the longest time and optimize that part of code.
        <br/>
      <br/>
      <img src="http://tech.eshaiju.in/images/rack-mini-profiler.jpg" width="650" height="230" title="" >
      <br/>
      <br/>
        This is very useful to inspect the performance of HTML pages, but it does not provide any default ways to review the performance of API endpoints. After some searching, I found out that, by default, the rack-mini-profiler gem collects the previous JSON call and will show all previous requests in the next loading HTML page. Using this feature we can achieve profiling API endpoints.
        <br/>
        <br/>

        Following are the steps that I did to profile API request.
        <br/>
        <br/>
        1- Make an API request using Postman or another client.
        <br/>
        2- Reload an HTML page, I loaded 404.html page by hitting URL http://localhost:3000/404.html
        <br/>
        3- This web page will show all profile information of previous API call.

        <br/>
        <br/>
        <img src="http://tech.eshaiju.in/images/api-rack-mini-profiler.png" width="650" height="230" title="" >
        <br/>
        <br/>
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slide-Active Record Basics]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/02/16/slide-active-record-basics/"/>
    <updated>2016-02-16T10:02:47+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/02/16/slide-active-record-basics</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
        In my current company <strong>Ruby Software Pvt.Ltd</strong>, I gave a session on Active Record Basics to New joiners. The primary goal of this session to give an introduction to active record basics and make them do basic CRUD operation using AR. 

    <br/>
        The slides of the session is available below..
        <br/><br/>
        <iframe src="//slides.com/shaijunonu/deck/embed" width="95%" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
            <br/><br/>

        Hope you enjoyed my slides.
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5 'Belongs_to' Associations Default to Required True]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/02/15/rails-5-belongs-to-associations-default-to-required-true/"/>
    <updated>2016-02-15T17:46:29+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/02/15/rails-5-belongs-to-associations-default-to-required-true</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
    5.0.0.beta2 version is released. One of the changes I noticed is <strong>belongs_to</strong> associations by default required is true, that means if you create an object by setting foreign key to be nil it will throw a <strong>must exist</strong> validation error. This change will have some impact if you are migrating an existing rails 4 application in to rails 5 and foreign key is not mandatory in your application.
    <br/>
  For example, if your User model has city_id as forign key, then if you create user without adding city_id then rails 5 will throw validation error.
  
<figure class='code'><figcaption><span>user.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:city</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


   
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.3.0 :003 > user = User.create(name:'Shaiju')
</span><span class='line'>   (0.3ms)  BEGIN
</span><span class='line'>   (0.2ms)  ROLLBACK
</span><span class='line'> => #&lt;User id: nil, name: "Shaiju", city_id: nil, created_at: nil, updated_at: nil> 
</span><span class='line'>2.3.0 :004 > user.errors
</span><span class='line'> => #&lt;ActiveModel::Errors:0xa8d9a00 @base=#&lt;User id: nil, name: "Shaiju", city_id: nil, created_at: nil, updated_at: nil>, @messages={:city=>["must exist"]}, @details={:city=>[{:error=>:blank}]}></span></code></pre></td></tr></table></div></figure>

  If we want to turn of this behavior we can use <strong>:optional => true </strong>. When set to true, the association will not have its presence validated.

  
<figure class='code'><figcaption><span>user.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:city</span><span class="p">,</span><span class="ss">optional</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.3.0 :001 > user = User.create(name:'Shaiju')
</span><span class='line'>   (0.3ms)  BEGIN
</span><span class='line'>  SQL (25.2ms)  INSERT INTO `users` (`name`, `created_at`, `updated_at`) VALUES ('Shaiju', '2016-02-15 12:25:55', '2016-02-15 12:25:55')
</span><span class='line'>   (81.6ms)  COMMIT
</span><span class='line'> => #&lt;User id: 1, name: "Shaiju", city_id: nil, created_at: "2016-02-15 12:25:55", updated_at: "2016-02-15 12:25:55"></span></code></pre></td></tr></table></div></figure>

 You can turn off this in entire application by setting Rails.application. config.active_record.belongs_to_required_by_default = false in <strong>config/initializers/active_record_belongs_to_required_by_default.rb</strong> file.
 
<figure class='code'><figcaption><span>config/initializers/active_record_belongs_to_required_by_default.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="c1"># Be sure to restart your server when you modify this file.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Require `belongs_to` associations by default. This is a new Rails 5.0</span>
</span><span class='line'><span class="c1"># default, so it is introduced as a configuration option to ensure that apps</span>
</span><span class='line'><span class="c1"># made on earlier versions of Rails are not affected when upgrading.</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">belongs_to_required_by_default</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIPI Dumping Examples Into Apipie_examples File]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/02/15/apipi-dumping-examples-in-to-apipie-examples-file/"/>
    <updated>2016-02-15T16:50:00+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/02/15/apipi-dumping-examples-in-to-apipie-examples-file</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
    <a href='https://github.com/Apipie/apipie-rails'>Apipie-rails</a> is a DSL and Rails engine for documenting your RESTful API. In older versions of apipi-rails we can dump all our exapmles in to <strong>apipie_examples.yml</strong> file. From apipie-rails 0.2.0 onwards format of storing examples changed from YAML to JSON: the default location is at <strong>doc/apipie_examples.json</strong>.
    <br/><br/>
    Example:
    
<figure class='code'><figcaption><span>doc/apipie_examples.json</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;channels#index&quot;</span><span class="p">:[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;verb&quot;</span><span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/api/v1/channels&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;query&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;show_in_doc&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;recorded&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;request_data&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;page&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;response_data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;channels&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Channel 1&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;thumb_image_path&quot;</span><span class="p">:</span> <span class="s2">&quot;/uploads/channel/thumb_image/1/channel1.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;language_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Tamil&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Channel 3&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;thumb_image_path&quot;</span><span class="p">:</span> <span class="s2">&quot;/uploads/channel/thumb_image/3/channel3.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;language_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Tamil&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;top_channels&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;channel&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Channel 2&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;thumb_image_path&quot;</span><span class="p">:</span> <span class="s2">&quot;/uploads/channel/thumb_image/2/channel2.png&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;language_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Tamil&quot;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;channels_count&quot;</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}],</span>
</span><span class='line'>    <span class="nt">&quot;channels#show&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;verb&quot;</span><span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/api/v1/channels/:id&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;query&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;show_in_doc&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;recorded&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;request_data&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;page&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;response_data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;channel&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;suraj comedy&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;language_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Malayalam&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nt">&quot;videos&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Suraj Latest Comedy&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Malayalam Comedy Stage Show :&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;video_link&quot;</span><span class="p">:</span> <span class="s2">&quot;https://www.youtube.com/watch?v=tGawZvf_UMA&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;view_count&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2016-02-15T09:43:14.000Z&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;thumb_image_path&quot;</span><span class="p">:</span> <span class="s2">&quot;/uploads/video/thumb_image/4/080.jpg&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;top_videos&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;video&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Suraj-Shaji Latest Comedy&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Malayalam Comedy Stage Show : Pashanam Shaji Speaking pashanam shaji mazhavil manorama,Flowers tv Comedy Super Nite&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;video_link&quot;</span><span class="p">:</span> <span class="s2">&quot;https://www.youtube.com/watch?v=tGawZvf_UMQ&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;view_count&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2016-02-15T07:48:22.000Z&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;thumb_image_path&quot;</span><span class="p">:</span> <span class="err">nil</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>

    <img src="http://tech.eshaiju.in/images/channel_index.png" width="650" height="230" title="" >
    <br/>
    If you want to upgrade existing document in to newer version then The migration should be as easy as running:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake apipie:convert_examples</span></code></pre></td></tr></table></div></figure>

This rake task will convert existing data from yml format in to json formatand store in doc/apipie_examples.json.
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camaleon CMS - Wordpress Alternative Built in Ruby on Rails 4]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/02/08/camaleon-cms-new-ruby-on-rails-cms-framework/"/>
    <updated>2016-02-08T18:01:20+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/02/08/camaleon-cms-new-ruby-on-rails-cms-framework</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
    <a href="http://camaleon.tuzitio.com/">Camaleon CMS</a> is a free and Open source Content Management System developed on Ruby on Rails 4 which was released 6 months back. This CMS is an alternative to wordpress for Ruby on Rails developers to manage advanced contents easily. Within 6 months of release, this project has <b>713</b> stars , <b>114</b> forks in github and  also have <b>16</b> contributors. 
     <img src="http://tech.eshaiju.in/images/camaleon-cms.png" width="650" height="230" title="" >
  <br/><br/>
    Let’s have a look at its features.
    <br/>
    <strong>Plugins</strong>:<br/>
This CMS is coming with a collection of plugins by default and we can simply enable it in our site using admin pannel. They have a <a href="http://camaleon.tuzitio.com/store/plugins">plugin store</a> which currently contains 14 plugins including Analytics, Ecommerce, Contact form, Post reorder and a few others.
<br/>
<strong>Security</strong>:<br/>

Camaleon CMS protects your content from common attacks, such as Remote code execution, SQL injections, Advanced sessions security, Cross Site Scripting, Control of abusive requests, Cross-Site Request Forgery.
<br/>
<strong>Nice Design and UX</strong>:<br/>
Camaleon CMS looks pretty good and modern, comparing to other CMS options available in Ruby on Rails. Camaleon CMS permit you to adapt the CMS to all your needs and not you adapt to the CMS. that is you can create your custom architecture with all attributes that you need for each kind of content.
<br/>
<strong>Site Speed</strong>:<br/>
Camaleon CMS include a lot of cache strategies to optimize the site access velocity. Cache contents, Cache queries, Manifests (compress and join asset files), Customize your content visualization for Desktop, Mobile and Tablet are some of the strategies used in Camaleon CMS.
<br/><br/>
<strong>Installing Camaleon CMS</strong>
<br/>
You can install Camaleon-CMS with the following steps. 
<br/>
Create your rails project :

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new my_project</span></code></pre></td></tr></table></div></figure>

Add the gem in your Gemfile :

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem ‘camaleon_cms’</span></code></pre></td></tr></table></div></figure>

Install the gem :

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>

Install the CMS (This will copy some basic templates and plugins in your project) :

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate camaleon_cms:install</span></code></pre></td></tr></table></div></figure>

Install required Gems for CMS and basic plugins

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>

Create database structure

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>

Start your server

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails server # start your server</span></code></pre></td></tr></table></div></figure>

Open a browser and navigate to <a href='http://localhost:3000'>http://localhost:3000</a> to see the initial setup page.
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Rails Application From Edge Version -- 5.0.0.beta1.1]]></title>
    <link href="http://tech.eshaiju.in/blog/2016/01/28/create-rails-application-from-edge-version-rails-5-0-beta/"/>
    <updated>2016-01-28T10:34:32+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2016/01/28/create-rails-application-from-edge-version-rails-5-0-beta</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
        <b>5.0.0.beta1.1</b> version is released which has some exciting stuffs like Action Cable, API mode, new Rails commands. To test all these new items we need to setup rails application from Edge Version. There are different ways to setup a rails project using Edge version. In this post I am explaining how I setup a project in Rails 5.0.0.beta.
    <br/>
        First We need to create an application folder with the name of the application and add a Gemfile.
        
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir app_name
</span><span class='line'>cd app_name
</span><span class='line'>touch Gemfile</span></code></pre></td></tr></table></div></figure>

        and add the following into the Gemfile
        
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source 'https://rubygems.org'
</span><span class='line'>ruby '2.2.3'
</span><span class='line'>
</span><span class='line'>gem 'rails', :github => 'rails/rails'
</span><span class='line'>gem 'arel', :github => 'rails/arel'
</span><span class='line'>gem 'rack', :github =>  'rack/rack'</span></code></pre></td></tr></table></div></figure>

Rails 5 requires Ruby 2.2.2 or greater.
Setup the Ruby Environment to Ruby 2.2 or greater then do the bundle install 

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 2.2.3
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>

Generate Rails application using the following code

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rails new . --force --dev</span></code></pre></td></tr></table></div></figure>

The &#8211;force flag will allow Rails to overwrite our Gemfile, and the &#8211;dev flag tells Rails to point to the edge version of Rails that we just bundled.
<br/>
That&#8217;s it, now we will have a brand new Rails application with Edge Version.
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis Ci Integration - Step by Step Tutorial]]></title>
    <link href="http://tech.eshaiju.in/blog/2015/08/09/travis-ci-integration-step-by-step-tutorial/"/>
    <updated>2015-08-09T21:00:06+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2015/08/09/travis-ci-integration-step-by-step-tutorial</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
    <a href="https://travis-ci.org/">Travis-CI</a> is an open source, free and hosted continuous integration service that could build and run the unit tests for you, on every commit to a GitHub repository. It supports projects in a multitude of languages. The service allows you to configure steps that would be run before, after and during the build and test process, with just one YAMLfile (named .travis.yml) in the root of your repo. Apart from running the many unit tests in the project and letting you know how your latest check-in affected the health of the project, the Travis-CI service could also do custom build tasks like a post-build deployment. Testing your open source project is free. To integrate Travis Ci in a private project we have to purchase suitable <a href="https://travis-ci.com/plans">plan </a>.
  <br/>
    Features created to help projects and teams
    <ul>
        <li>Watch your tests as they run</li>
        <li>Keep your config with your code</li>
        <li>Slack, HipChat, Emails and more</li>
        <li>A clean VM for every build</li>
        <li>Run your tests in parallel</li>
        <li>Linux and Mac (and iOS) supported</li>
        <li>Great API and command line tool</li>
  </ul>
  <strong>To get started with Travis CI: </strong>
  <br/>
  <ol>
      <li>
        Sign into Travis CI with your GitHub account, accepting the GitHub access permissions confirmation.
        </li>
        <li>
            Once you’re signed in, and Travis synchronized your repositories from GitHub, go to your profile page and enable Travis CI builds for your repository.  (Note: You can only enable Travis CI builds for repositories you have admin access to.)</li>
            <img src="http://tech.eshaiju.in/images/Travis-CI-1.png" width="690" height="230" title="" >
        <li>
            Add .travis.yml to your project’s root folder
        </li>
        <li> 
            Add settings to .travis.yml 
        </li>
        
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: ruby
</span><span class='line'>rvm:
</span><span class='line'>  - "2.2.0"
</span><span class='line'>env:
</span><span class='line'>  - DB=mysql
</span><span class='line'>script: 
</span><span class='line'>  - RAILS_ENV=test bundle exec rake db:migrate --trace
</span><span class='line'>  - bundle exec rake db:test:prepare
</span><span class='line'>  - bundle exec rspec spec/
</span><span class='line'>before_script:
</span><span class='line'>  - mysql -e 'create database myapp_test'
</span><span class='line'>bundler_args: --binstubs=./bundler_stubs</span></code></pre></td></tr></table></div></figure>

        <li>
            Setup Database
MySQL on Travis CI is started on boot, binds to 127.0.0.1 and requires authentication. You can connect using the username “travis” or “root” and a blank password. Note that the “travis” user does not have full MySQL privileges that the “root” user does.</li>
        config/database.yml example for Ruby projects using ActiveRecord:
    
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test:
</span><span class='line'>    adapter: mysql2
</span><span class='line'>    database: myapp_test
</span><span class='line'>    username: travis
</span><span class='line'>    encoding: utf8</span></code></pre></td></tr></table></div></figure>

    <li>
    Commit this to GitHub
(Note: Travis only runs a build on the commits you push after adding the repository to Travis.)
    </li>
    <li>
        Wait for Travis CI to run a build on your repository, check the build status. (Travis CI sends you an email when build fails)
    </li>
    <img src="http://tech.eshaiju.in/images/travis-ci-2.png" width="390" height="230" title="" >
<img src="http://tech.eshaiju.in/images/travis-ci-3.png" width="325" height="230">
  </ol>
  Example of Travis Ci builds can be seen <a href="https://travis-ci.org/eshaiju/demo_app_with_travis_ci">here.</a>
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slide - Playing With Active Record Migrations]]></title>
    <link href="http://tech.eshaiju.in/blog/2015/07/24/slide-playing-with-active-record-migrations/"/>
    <updated>2015-07-24T11:58:13+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2015/07/24/slide-playing-with-active-record-migrations</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
        My Third session to the new joinies in <strong>Ruby Software Pvt.Ltd.</strong> is on Active Record Migrations.
        <br/>
        The slides of my session is available below ..
        <br/><br/>
        <iframe src="//slides.com/shaijunonu/playing_with_active_record_migrations/embed" width="95%" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
            <br/><br/>
        Hope you enjoyed my slides.
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slide - an Introduction to Active Record Associations]]></title>
    <link href="http://tech.eshaiju.in/blog/2015/07/10/slide-an-introduction-to-active-record-associations/"/>
    <updated>2015-07-10T12:35:59+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2015/07/10/slide-an-introduction-to-active-record-associations</id>
    <content type="html"><![CDATA[<div class='post'>
    <div dir="ltr" style="text-align: left;" trbidi="on">
        My second session to the new joinies in <strong>Ruby Software Pvt.Ltd.</strong> is on Active Record Associations. The primary goal of this session is to introduce the basic concepts of Active Record Associations.
        <br/>
        The slides of my session is available below ..
        <br/><br/>
        <iframe src="//slides.com/shaijunonu/active_record_association_basics/embed" width="95%" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
            <br/><br/>
        Hope you enjoyed my slides.
    </div>
</div>

]]></content>
  </entry>
  
</feed>
