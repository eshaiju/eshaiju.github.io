<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Rails Kitchen]]></title>
  <link href="http://tech.eshaiju.in/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://tech.eshaiju.in/"/>
  <updated>2017-10-15T01:25:30+05:30</updated>
  <id>http://tech.eshaiju.in/</id>
  <author>
    <name><![CDATA[Shaiju E]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphQL Ruby Mutation With Input Object Type]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/10/14/graphql-ruby-mutation-with-input-object-type/"/>
    <updated>2017-10-14T23:52:38+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/10/14/graphql-ruby-mutation-with-input-object-type</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <p>In the previous blog post about <a href='http://tech.eshaiju.in/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails/'>GraphQl mutation</a>, we specified each field in input as input_field. This method will do the job but it has some issues.</p>
  Consider an example mutation for saving an article. Here we used the input_field method without InputObjectType.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ArticleMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;AddArticle&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addArticle</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addArticle</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL mutation&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot; This article is about graphql mutation using  InputObjectType&quot;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">title</span>
</span><span class='line'>      <span class="n">body</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

For saving this we need to instantiate article object by assigning each and every input params like this.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This method become ugly if our object contain lots fields.
We can define and utilize mutation input params in the better way using <strong>InputObjectType</strong>. If we can specify article object as input_field instead of each field we can save object like below.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">to_h</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
which is maintanable and easy to read.
Lets see how we can achive this.
<br/>
The first step is to define InputObjectType and declare that input object type as input_field. Here we are going to create InputObjectType in another folder inside our graphql folder for maintainability.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/input_objects/article_input_object_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleInputObjectType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InputObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;ArticleInput&#39;</span>
</span><span class='line'>  <span class="n">input_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">input_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Since we created new folder for <strong>input_objects</strong>, we have to tell Rails to autoload paths. place below code in <strong>application.rb</strong> to autoload it.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/input_objects&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now we can declare <strong>ArticleInputObjectType</strong> as input_field inside our mutation and use declared input_field inside our mutation resolver to save the article. So final mutation definition will look like this.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ArticleMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;AddArticle&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="o">!</span><span class="no">ArticleInputObjectType</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:article</span><span class="o">].</span><span class="n">to_h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

That's it, we are done, now we can save new article using addArticle mutation.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addArticle</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addArticle</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL mutation&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot; This article is about graphql mutation using  InputObjectType&quot;</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">title</span>
</span><span class='line'>      <span class="n">body</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/images/graphql-mutation.png" width="1200" height="260" title="" >
You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQl Security Issues and Solutions]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/08/05/graphql-security-issues-and-solutions/"/>
    <updated>2017-08-05T12:49:42+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/08/05/graphql-security-issues-and-solutions</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>One of the main highlights of GraphQl is declarative fetching, the client can define the shape of the data he needed and GraphQL server will provide data in the same shape. But an evil client can exploit this advantage to make deeper nesting and complex queries and can do DDoS attack.<p>
    Example for a deeper nesting query:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">query</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">articles</span><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">body</span>
</span><span class='line'>    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span>
</span><span class='line'>      <span class="n">user</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>          <span class="n">user</span><span class="p">{</span>
</span><span class='line'>            <span class="n">comments</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="n">comment</span>
</span><span class='line'>              <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">comment</span>
</span><span class='line'>                  <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                    <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>                      <span class="n">comment</span>
</span><span class='line'>                      <span class="n">user</span><span class="p">{</span>
</span><span class='line'>                        <span class="nb">name</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
GraphQL provide three confirations to avoid this issue. <br/><br/>

<strong>Timeout:</strong>
We can avoid queries utilizing server more than specified time by setting a timeout. If a query takes more time for execute, then after time out GraphQL will return the result of query up to that time and simply reject nonexcecuted part of the query.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">GraphqlRubySampleSchema</span><span class="o">.</span><span class="n">middleware</span> <span class="o">&lt;&lt;</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">::</span><span class="no">TimeoutMiddleware</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">max_seconds</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">err</span><span class="p">,</span> <span class="n">query</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;GraphQL Timeout: </span><span class="si">#{</span><span class="n">query</span><span class="o">.</span><span class="n">query_string</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/images/graphql-timeout.png" width="1200" height="260" title="" >
<img src="/images/graphql-timeout-1.png" width="1200" height="260" title="" >

<strong>Maximum Depth:</strong> Another solution for prevent deeply-nested queries is setting <strong>max_deplth</strong>. If our query depth is greater than max_depth we set, the server will simply reject full query and return an error message.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">max_depth</span> <span class="mi">12</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/images/graphql-maxdepth.png" width="1200" height="260" title="" >
<strong>Query Complexity:</strong> We can prevent complex queries by setting <strong>max_complexity</strong> in GraphQL schema. Each field in our type system has a complexity number so if our query complexity exceeds max_complexity, the server will reject query just like in the case of max_depth.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">max_depth</span> <span class="mi">12</span>
</span><span class='line'>  <span class="n">max_complexity</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/images/graphql-maxcomplexity2.png" width="1200" height="260" title="" >
<img src="/images/graphql-maxcomplexity1.png" width="1200" height="260" title="" >
<p>By default complexity of field is 1, but we can configure constant complexity for fields in type system and also can set complexity dynamically by passing conditions </p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Constant complexity:</span>
</span><span class='line'><span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Dynamic complexity:</span>
</span><span class='line'><span class="n">field</span> <span class="ss">:top_comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:limit</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">default_value</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>  <span class="n">complexity</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">child_complexity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">ctx</span><span class="o">[</span><span class="ss">:current_user</span><span class="o">].</span><span class="n">admin?</span>
</span><span class='line'>      <span class="c1"># no limit for admin users</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># `child_complexity` is the value for selections</span>
</span><span class='line'>      <span class="c1"># which were made on the items of this list.</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>      <span class="c1"># We don&#39;t know how many items will be fetched because</span>
</span><span class='line'>      <span class="c1"># we haven&#39;t run the query yet, but we can estimate by</span>
</span><span class='line'>      <span class="c1"># using the `limit` argument which we defined above.</span>
</span><span class='line'>      <span class="n">args</span><span class="o">[</span><span class="ss">:limit</span><span class="o">]</span> <span class="o">*</span> <span class="n">child_complexity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRY GraphQL Definitions Using Interfaces]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/06/09/dry-graphql-definitions-using-interfaces/"/>
    <updated>2017-06-09T11:10:47+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/06/09/dry-graphql-definitions-using-interfaces</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
  <p>We can make GraphQL Types and mutations DRY using interfaces. An Interface is an abstract type that contains a collection of types which implement some of the same fields. We can avoid specifying the same set of fields in different GraphQL Types and mutations by defining an interface and using in sharing Types and mutations.</p>
<p>Interfaces can have fields, defined with a field, just like a GraphQL object type. Objects which implement this field inherit field definitions from the interface. An object type can override the inherited definition by redefining that field.</p>
<p>For example, active record time stamps are common fields in Rails models. So we can avoid declaring these fields in all object types by declaring an interface <strong>ActiveRecordTimestamp</strong> with these fields and using it our object types.</p>
We can define ActiveRecordTimestamp like this.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/interfaces/active_record_timestamp.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActiveRecordTimestamp</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InterfaceType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;ActiveRecordTimestamp&#39;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:createdAt</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="ss">property</span><span class="p">:</span> <span class="ss">:created_at</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updatedAt</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="ss">property</span><span class="p">:</span> <span class="ss">:updated_at</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Since we created a new folder for interfaces, we have to tell Rails to autoload paths. Place below code in application.rb to autoload it.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/interfaces&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Now we can add defined interfaces in our object Type using <strong>interfaces</strong> keyword.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">interfaces</span> <span class="o">[</span><span class="no">ActiveRecordTimestamp</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">CommentType</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Example for including multiple interfaces in Ruby object type.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/types/comment_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">CommentType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># multiple interfaces included using comma.</span>
</span><span class='line'>  <span class="n">interfaces</span> <span class="o">[</span><span class="no">ActiveRecordTimestamp</span><span class="p">,</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Node</span><span class="o">.</span><span class="n">interface</span><span class="o">]</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:user</span><span class="p">,</span> <span class="no">UserType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Now, this active record time stamp will be available in both above-mentioned object types.

<p>We can use return_interfaces to define and reuse return types in different mutation definitions. The result of the resolve block will be passed to the field definitions in the interfaces, and both interface-specific and mutation-specific fields will be available to clients.</p>

For example, we can define a interface which will define notification of a mutation.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/interfaces/mutation_result.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationResult</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:InterfaceType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;MutationResult&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:success</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">Boolean</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:notice</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="no">ValidationError</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="no">CreateArticle</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">return_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">return_field</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">return_interfaces</span> <span class="o">[</span><span class="no">MutationResult</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># clientMutationId will also be available automatically</span>
</span><span class='line'>  <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">,</span> <span class="n">notice</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">create_with_input</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">success</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>      <span class="ss">notice</span><span class="p">:</span> <span class="n">notice</span>
</span><span class='line'>      <span class="ss">title</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>      <span class="ss">errors</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
   </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQL Ruby Error Handling]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/31/graphql-ruby-error-handling/"/>
    <updated>2017-05-31T23:07:58+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/31/graphql-ruby-error-handling</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p>GraphQL endpoints, we can expose errors as part of our schema. We should check <strong>errors</strong> fields to see if any errors in result data. For example if we query a field which is not existing in type system, we will get a error response. This type of errors is not supposed to be displayed to end users. It helps with debugging, error tracking etc.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;errors&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Field &#39;user&#39; doesn&#39;t exist on type &#39;Article&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;locations&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;line&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;column&quot;</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fields&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;query&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;article&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;user&quot;</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
If a field's resolve function returns an ExecutionError, the error will be inserted into the response's <strong>errors</strong> key and the field will resolve to nil. It is often required to perform additional validation of the input parameters passed to GraphQL mutations, and provide user-friendly error messages in case validation fails or mutation cannot be completed successfully.
<br/>
For example, we could add errors to ArticleType:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/types/article_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ArticleType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Article&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">[</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="n">obj</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Then, when clients create a article, they should check the errors field to see if it was successful:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">createArticle</span><span class="p">(</span><span class="ss">article</span><span class="p">:</span> <span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;GraphQL is Nice&quot;</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span>
</span><span class='line'>    <span class="n">title</span>
</span><span class='line'>    <span class="n">errors</span> <span class="c1"># in case the save failed</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
If errors are present (and id is null), the client knows that the operation was unsuccessful, and they can discover reason. If some part of our resolve function would raise an error, we can rescue it and add to the <strong>errors</strong> key by returning a GraphQL:: ExecutionError
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">article_params</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="s2">&quot;article&quot;</span><span class="o">].</span><span class="n">to_h</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># on success, return the article:</span>
</span><span class='line'>    <span class="n">article</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span> <span class="o">=&gt;</span> <span class="n">err</span>
</span><span class='line'>    <span class="c1"># on error, return an error:</span>
</span><span class='line'>    <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ExecutionError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Invalid input for Article: </span><span class="si">#{</span><span class="n">article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

If we don't want to <strong>begin ... rescue ... end</strong> in every field, we can wrap resolve functions in error handling.<br/> For example, we could make an object that wraps another resolver:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/resolvers/rescue_form.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Wrap field resolver `resolve_func` with a handler for `error_superclass`.</span>
</span><span class='line'><span class="c1"># `RescueFrom` instances are valid field resolvers too.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RescueFrom</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">error_superclass</span><span class="p">,</span> <span class="n">resolve_func</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@error_superclass</span> <span class="o">=</span> <span class="n">error_superclass</span>
</span><span class='line'>    <span class="vi">@resolve_func</span> <span class="o">=</span> <span class="n">resolve_func</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@resolve_func</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="vi">@error_superclass</span> <span class="o">=&gt;</span> <span class="n">err</span>
</span><span class='line'>    <span class="c1"># Your error handling logic here:</span>
</span><span class='line'>    <span class="c1"># - return an instance of `GraphQL::ExecutionError`</span>
</span><span class='line'>    <span class="c1"># - or, return nil:</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
apply it to fields on an opt-in basis:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/article_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">field</span> <span class="ss">:create_article</span><span class="p">,</span> <span class="no">ArticleType</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Wrap the resolve function with `RescueFrom.new(err_class, ...)`</span>
</span><span class='line'>  <span class="n">resolve</span> <span class="no">RescueFrom</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br/>
Reference: <a href='http://graphql-ruby.org/'>GraphQL Ruby website</a>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GraphQL -Mutation Query Implementation - Ruby on Rails]]></title>
    <link href="http://tech.eshaiju.in/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails/"/>
    <updated>2017-05-15T17:37:28+05:30</updated>
    <id>http://tech.eshaiju.in/blog/2017/05/15/graphql-mutation-query-implementation-ruby-on-rails</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">
    <p><strong>Mutation</strong> is a special type of query used to change data in the database like Creating, Editing or Deleting Records from a table or Store. These are the equivalent to the POST, PUT, PATCH and DELETE in HTTP/REST speak. Defining mutations is very similar to defining queries. The only difference is how you implement the logic inside the mutation. In mutation, we can control and specify the output data that API need to return after mutation procedure.</p>
    <p>In this article, I am Adding a mutation query to add comments to an article which we discussed in <a href="http://tech.eshaiju.in/blog/2017/05/09/solving-n-plus-1-query-in-graphql-using-graphql-batch/">previous example</a>.</p>
    To add mutations to your GraphQL schema, first we need to define a mutation type in mutations folder
    <div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now we need to pass it into the schema
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/graphql_ruby_sample_schema.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GraphqlRubySampleSchema</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'>  <span class="n">mutation</span> <span class="no">MutationType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Like QueryType, MutationType is a root of the schema. Members of MutationType are mutation fields. For GraphQL in general, mutation fields are identical to query fields except that they have side-effects (which mutate application state, eg, update the database).<br/><br/>
Since we created new folder for mutations, we have to tell Rails to autoload paths. Put below code in application.rb to autoload it.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/application.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app/graphql/mutations&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  <p>Now we need to define specific mutation query. Following are the process to define a mutation<br />- give operation a name <br />- declare its inputs<br />- declare its outputs<br />- declare the mutation procedure in resolve block.<br /> <strong>resolve</strong> should return a hash with a key for each of the <strong>return_fields</strong></p>
  In out example, we need to define <strong>CommentMutations</strong> in mutations folder.
  <div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;AddComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:articleId</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Article not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comments</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">new_comment</span> <span class="o">=</span> <span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:userId</span><span class="o">]</span><span class="p">,</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:comment</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
    Here <strong>input_field</strong> specify the input params we can pass in the query. In <strong>return_field</strong>, we can specify the fields returning after the update. Inside resolve block, we define the business logic. and <strong>resolve</strong> should return a hash with a key for each of the return_fields.<br/><br/>
    After defining this, we need to add the mutation's derived field to the mutation type.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Now we can try this mutation in GraphiQL:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addComment</span><span class="p">{</span>
</span><span class='line'>  <span class="n">addComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="p">{</span> <span class="ss">comment</span><span class="p">:</span> <span class="s2">&quot;New comment&quot;</span><span class="p">,</span> <span class="ss">articleId</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">userId</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>        <span class="n">user</span><span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Here’s a possible JSON response for that query:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;addComment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;article&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Good article&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Keep going&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New Comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 2&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;David&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;Another Comment from User 1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;TEST&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New comment&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Shaiju E&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
We can call the same query by passing inputs using variables
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">addComment</span><span class="p">(</span><span class="vg">$comments</span><span class="p">:</span> <span class="no">AddCommentInput</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>  <span class="n">addComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="vg">$comments</span><span class="p">){</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>        <span class="n">user</span><span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Query</span> <span class="no">Variabbles</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;comments&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="s2">&quot;New comment1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;articleId&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;userId&quot;</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>$comments: AddCommentInput!</strong> will configure the variable <strong>$comments</strong> to take values from <strong>query variables</strong> section. <strong>input: $comments</strong> will pass $comments as input to mutation query.</p>
<img src="/images/mutation.png" width="1200" height="260" title="" >

Lets write another example for updation mutation. If we want to update a comment, we need to write UpdateComment mutation in comment_mutations.rb

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Create</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;AddComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:articleId</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Article not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comments</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">new_comment</span> <span class="o">=</span> <span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:userId</span><span class="o">]</span><span class="p">,</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:comment</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">new_comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Update</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;UpdateComment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:userId</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:articleId</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:comment</span><span class="p">,</span> <span class="no">CommentType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Comment not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">valid_inputs</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">inputs</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@original_values</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="n">comment</span><span class="o">.</span><span class="n">respond_to?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">underscore</span> <span class="p">})</span><span class="o">.</span><span class="n">except</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">valid_inputs</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">comment</span><span class="p">:</span> <span class="n">comment</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Main defference here is, we need to create <strong>valid_inputs</strong>. This will allow us mass assignment with update attributes with valied fields which we passed.<br/><br/>
After defining this, we need to add the mutation's derived field to the mutation type.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updateComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Update</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Mutation for delete a comment and return post and deleted comment ID
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/comment_mutations.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentMutations</span>
</span><span class='line'>  <span class="no">Destroy</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Relay</span><span class="o">::</span><span class="no">Mutation</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;DestroyComment&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="s1">&#39;Delete a comment and return post and deleted comment ID&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define input parameters</span>
</span><span class='line'>    <span class="n">input_field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define return parameters</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:deletedId</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:article</span><span class="p">,</span> <span class="no">ArticleType</span>
</span><span class='line'>    <span class="n">return_field</span> <span class="ss">:errors</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">_obj</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span> <span class="ss">errors</span><span class="p">:</span> <span class="s1">&#39;Comment not found&#39;</span> <span class="p">}</span> <span class="k">if</span> <span class="n">comment</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">article</span>
</span><span class='line'>      <span class="n">comment</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">{</span> <span class="ss">article</span><span class="p">:</span> <span class="n">article</span><span class="o">.</span><span class="n">reload</span><span class="p">,</span> <span class="ss">deletedId</span><span class="p">:</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Other mutations defined here....</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/graphql/mutations/mutation_type.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">MutationType</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Mutation&quot;</span>
</span><span class='line'>  <span class="c1"># Add the mutation&#39;s derived field to the mutation type</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:addComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Create</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:updateComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Update</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:destroyComment</span><span class="p">,</span> <span class="ss">field</span><span class="p">:</span> <span class="ss">CommentMutations</span><span class="p">:</span><span class="ss">:Destroy</span><span class="o">.</span><span class="n">field</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now we can try this mutation in GraphiQL:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mutation</span> <span class="n">destroyComment</span><span class="p">(</span><span class="vg">$comment</span><span class="p">:</span> <span class="no">DestroyCommentInput</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>  <span class="n">destroyComment</span><span class="p">(</span><span class="ss">input</span><span class="p">:</span> <span class="vg">$comment</span><span class="p">){</span>
</span><span class='line'>    <span class="n">errors</span>
</span><span class='line'>    <span class="n">article</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">id</span>
</span><span class='line'>      <span class="n">comments</span><span class="p">{</span>
</span><span class='line'>        <span class="nb">id</span>
</span><span class='line'>        <span class="n">comment</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Query</span> <span class="no">Variabbles</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
You can see sample code <a href="https://github.com/eshaiju/graphql-ruby-sample">here</a>.
  </div>
</div>

]]></content>
  </entry>
  
</feed>
