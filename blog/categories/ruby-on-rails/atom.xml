<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | TechSleek]]></title>
  <link href="http://eshaiju.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://eshaiju.github.io/"/>
  <updated>2014-04-30T19:24:22+05:30</updated>
  <id>http://eshaiju.github.io/</id>
  <author>
    <name><![CDATA[Shaiju E]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[In Page Editing in 'Active Admin' - Using Gem 'Best in Place']]></title>
    <link href="http://eshaiju.github.io/blog/2014/04/30/in-page-editing-in-rails-active-admin-using-gem-best-in-place/"/>
    <updated>2014-04-30T18:20:30+05:30</updated>
    <id>http://eshaiju.github.io/blog/2014/04/30/in-page-editing-in-rails-active-admin-using-gem-best-in-place</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
<span style="font-weight: bold;">Best in place </span>is a j Query based Ajax plug in that can help us to add in place editing to our application that takes profit of Restful server-side controllers to allow users to edit stuff with no need of forms. Usage of this gem in rails application is well documented in <a href="https://github.com/bernat/best_in_place">github page</a>. You can checkout their live demo <a href="http://bipapp.heroku.com">here</a>. In this post I concentrating on how we can use best in place gem with is active admin pages.
<br/>
To add Best in Place to our app we first need to add its gem to our application's Gemfile and run bundle.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'best_in_place', github: 'bernat/best_in_place'</span></code></pre></td></tr></table></div></figure></notextile></div>
Require best in place in active_admin.js.coffee and initialise it
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#= require best_in_place
</span><span class='line'>#= require best_in_place.purr
</span><span class='line'>
</span><span class='line'>$(document).ready ->
</span><span class='line'>  jQuery(".best_in_place").best_in_place()</span></code></pre></td></tr></table></div></figure></notextile></div>

To make text field editable in active admin show page 
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>row :name do |project|
</span><span class='line'> best_in_place project, :name, :type => :input,:path =>[:admin,project]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
To make select field editable
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>row :status do |project|
</span><span class='line'>  best_in_place project, :status, :type => :select,:path =>[:admin,project],:collection => Project.statuses.map{|status| [status,status]}
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
Textarea can be make editable using following code
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>row :status_description  do |project|
</span><span class='line'>  best_in_place project, :status_description, :type => :textarea,:path =>[:admin,project]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
For Editable Datepicker with formated output use <span style="font-weight: bold;">display_with</span>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>row "Planned Start Date" do |project|
</span><span class='line'>  best_in_place project, :planned_start_date , :type => :date ,:path =>[:admin,project],  :display_with => lambda { |v| v.try(:strftime,'%b %d, %Y') }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Forms for Belongs_to Relationship - ActiveAdmin]]></title>
    <link href="http://eshaiju.github.io/blog/2014/03/16/nested-forms-for-belongsto-relationship/"/>
    <updated>2014-03-16T12:27:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2014/03/16/nested-forms-for-belongsto-relationship</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
For my current project I had to add nested form for belongs_to relationship. After lots of searching i found a solution.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Product&lt;ActiveRecord::Base
</span><span class='line'> belongs_to :cost, :class_name => 'Currency', foreign_key: 'cost_id'
</span><span class='line'> accepts_nested_attributes_for :cost
</span><span class='line'> attr_accessor :cost_id
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Currency &lt; ActiveRecord::Base
</span><span class='line'> def self.currency_types
</span><span class='line'>   ['SAR','AED','USD','EUR','INR']
</span><span class='line'> end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveAdmin.registerProductdo
</span><span class='line'> form do |f|
</span><span class='line'>    f.semantic_errors *f.object.errors.keys
</span><span class='line'>    f.inputs "Details" do
</span><span class='line'>      f.input :name
</span><span class='line'>      f.inputs "cost" do
</span><span class='line'>         f.semantic_fields_for :cost_attributes  do |j|
</span><span class='line'>            j.inputs do
</span><span class='line'>              j.input :currency_type, :as => :select, :collection => Currency.currency_types,:label =>'Cost'
</span><span class='line'>              j.input :value
</span><span class='line'>            end
</span><span class='line'>          end
</span><span class='line'>        end
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>    f.actions
</span><span class='line'> end
</span><span class='line'>
</span><span class='line'> controller do
</span><span class='line'>   def permitted_params
</span><span class='line'>    params.permit product: [:name,cost_attributes:[:id,:currency_type,:value]]
</span><span class='line'>   end
</span><span class='line'> end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FullCalendar - Integration With Ruby on Rails]]></title>
    <link href="http://eshaiju.github.io/blog/2014/03/05/fullcalendar-integration-with-ruby-on/"/>
    <updated>2014-03-05T13:02:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2014/03/05/fullcalendar-integration-with-ruby-on</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">

  FullCalendar is a jQuery plugin that provides a full-sized drag drop calendar like the one below. It uses AJAX to fetch events on-the-fly for each month and is easily configured to use your own feed format (an extension is provided for Google Calendar. It is visually customizable and exposes hooks for user-triggered events (like clicking or dragging an event). It is open source licensed under an MIT license
  <br/>
<img border="0" src="http://1.bp.blogspot.com/-qa_L3JuaqW4/UvxSTF0KUgI/AAAAAAAAAUw/7kbq7plSXAU/s1600/calender.png" height="426" width="640" />
<br/>
Step 1 : Download the JQuery fullcalendar plugin by <a href="http://arshaw.com/fullcalendar/download/">here</a> and add fullcalender.js and fullcalender.css in to javascripts and stylesheets folder.Fullcalendar is also available as a gem for Ruby on Rails which fits well with Asset Pipeline.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'fullcalendar-rails'</span></code></pre></td></tr></table></div></figure></notextile></div>
Once the gem is installed, include fullcalendar javascript and css assets to your js and css file
<br/>
Step 2 : In view page index.html.erb or some other html.erb page add a div with id 'calendar'
<br/>
Then add following code to js file
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(document).ready(function() {
</span><span class='line'>   $("#calendar").fullCalendar({
</span><span class='line'>     header: 
</span><span class='line'>     left: "prev,next today",
</span><span class='line'>     center: "title",
</span><span class='line'>     right: "month,agendaWeek,agendaDay"
</span><span class='line'>     defaultView: "month",
</span><span class='line'>     height: 500,
</span><span class='line'>     slotMinutes: 15,
</span><span class='line'>     events: "/dashboard/get_events",
</span><span class='line'>     timeFormat: "h:mm t{ - h:mm t} ",
</span><span class='line'>     dragOpacity: "0.5"
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div>
Now we need to write a method to fetch Json data which we are going to display on calender
<br/>
In my example 

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class DashboardController &lt; ApplicationController
</span><span class='line'>  respond_to :json
</span><span class='line'>  def get_events
</span><span class='line'>    @task = current_user.tasks
</span><span class='line'>    events = []
</span><span class='line'>    @task.each do |task|
</span><span class='line'>      events &lt;&lt; {:id => task.id, :title => "#{task.taskable.try(:name)} : #{task.task}", :start => "#{task.planned_start_date}",:end => "#{task.planned_end_date}" }
</span><span class='line'>    end
</span><span class='line'>    render :text => events.to_json
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DemoApp::Application.routes.draw do
</span><span class='line'>  resources :dashboard do
</span><span class='line'>    get :get_events, on: :collection
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>

that's it , now you can see calender in your dashboard
<br/>

</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin- Adding a Filter on Has_one Through Association]]></title>
    <link href="http://eshaiju.github.io/blog/2014/02/04/activeadmin-adding-filter-on-hasone/"/>
    <updated>2014-02-04T12:34:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2014/02/04/activeadmin-adding-filter-on-hasone</id>
    <content type="html"><![CDATA[<div class='post'>
  <div dir="ltr" style="text-align: left;" trbidi="on">




Given Project, Task,  and Activity, I've managed to set up has_one :through relationship filter with the following:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Project &lt; ActiveRecord::Base
</span><span class='line'>  has_many :tasks
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Task &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :project
</span><span class='line'>  has_many :activities, :dependent => :destroy
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Activity &lt; ActiveRecord::Base
</span><span class='line'>  has_many :tasks
</span><span class='line'>  has_one  :project, through: :task
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveAdmin.register User do
</span><span class='line'>  filter :task_project_id, as: :select, collection: Project.all, label: 'Project'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>

  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autocomplete Using Chosen in Rails Active_admin]]></title>
    <link href="http://eshaiju.github.io/blog/2014/01/01/autocomplete-using-chosen-in-rails/"/>
    <updated>2014-01-01T16:29:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2014/01/01/autocomplete-using-chosen-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">

In one of my recent project, i need to implement a autocomplte in active_admin interface to select one or more users from user list. I tried googling on this and zeroed in on the library Chosen.Chosen by default supports multiple select, selected state.Chosen is available as a gem for Ruby on Rails which fits well with Asset Pipeline.
<br/>Include Chosen gem in your Gemfile.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem ‘chosen-rails’</span></code></pre></td></tr></table></div></figure></notextile></div>
Once the gem is installed, include chosen javascript assets to your js file. 
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require chosen-jquery</span></code></pre></td></tr></table></div></figure></notextile></div>
In /app/admin/modelname.rb
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveAdmin.register Modlename do
</span><span class='line'>  #Customize create and edit form
</span><span class='line'>  form do |f|
</span><span class='line'>    f.inputs do
</span><span class='line'>       f.input :name
</span><span class='line'>       f.input :othermodel, :input_html => { :class => "chosen-input" } # other model with has_many relation ship
</span><span class='line'>    end
</span><span class='line'>    f.buttons
</span><span class='line'>  end   
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div>
in active_admin.js
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(document).ready(function(){
</span><span class='line'>   $(".chosen-input").chosen();
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div>
if you are using coffee script instead of js then use this 
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ->
</span><span class='line'>  # enable chosen js
</span><span class='line'>  $('.chosen-input').chosen
</span><span class='line'>    allow_single_deselect: true
</span><span class='line'>    no_results_text: 'No results matched'</span></code></pre></td></tr></table></div></figure></notextile></div>
Then, include Chosen stylesheet assets to your css file.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*= require chosen</span></code></pre></td></tr></table></div></figure></notextile></div>
To include more details check <a href='http://harvesthq.github.io/chosen/'>Here </a>
<br/>
Thats it, you will have a nice autocomplte with multiselect . Happy coding…
<br/><br/>
</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Lobna Mohamed</div>
<div class='content'>
Thanks for the good post, but does not save data to the database<br />I guess it related to permit_params I am trying this <br />permit_params :name, :othermodel_ids<br />but still not working, have you another idea??</div>


</div>
</div>

]]></content>
  </entry>
  
</feed>
