<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kannel | TechSleek]]></title>
  <link href="http://eshaiju.github.io/blog/categories/kannel/atom.xml" rel="self"/>
  <link href="http://eshaiju.github.io/"/>
  <updated>2014-04-29T10:35:27+05:30</updated>
  <id>http://eshaiju.github.io/</id>
  <author>
    <name><![CDATA[Shaiju E]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Changing Kannel Log Level & Log Rotation]]></title>
    <link href="http://eshaiju.github.io/blog/2013/11/03/changing-kannel-log-level-log-rotation/"/>
    <updated>2013-11-03T12:40:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2013/11/03/changing-kannel-log-level-log-rotation</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
  If Kannel is configured so that the bearerbox, wapbox and/or smsbox log to file each of these log files will continue to grow unless administered in some way. &nbsp;One way of reducing logs is by change log level.&nbsp;kannel allow to have 5 log-level ( 0 - debug, 1 - info, 2 - warning, 3 - error, 4 - panic).&nbsp;We can change log level by editing log-level component in configuration file and also done by admin HTTP command without restaring bearerbox.
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:13000/log-level?password=bar&amp;level=2</span></code></pre></td></tr></table></div></figure></notextile></div>
  Another way of administering log files is to 'rotate' the logs on a regular basis using a tool such as logrotate. A sample logrotate script is shown below.<br />
  Setup Logrotate<br /><br />
  Step 1 : If logrotate is not already on your VPS, install it now.<br />
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install logrotate</span></code></pre></td></tr></table></div></figure></notextile></div>
  Step 2 : Add following script in file  <span style="font-weight: bold;">/etc/logrotate.d</span>
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/var/log/kannel/*.log {daily
</span><span class='line'>                         missingok
</span><span class='line'>                         rotate 365
</span><span class='line'>                         compress
</span><span class='line'>                         delaycompress
</span><span class='line'>                         notifempty
</span><span class='line'>                         create 640 kannel adm
</span><span class='line'>                         sharedscripts
</span><span class='line'>                         postrotate
</span><span class='line'>                         killall -HUP bearerbox smsbox wapbox || true &gt; /dev/null 2&gt; /dev/null
</span><span class='line'>                         endscript
</span><span class='line'>                        }</span></code></pre></td></tr></table></div></figure></notextile></div>
In this example the Kannel log files found in <span style="font-weight: bold;">/var/log/kannel</span> are rotated and compressed daily over 365 days.&nbsp;To verify if a particular log is rotating or not and to check the last date and time of its rotation, check the <span style="font-weight: bold;"> /var/lib/logrotate/status </span>file.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/lib/logrotate/status</span></code></pre></td></tr></table></div></figure></notextile></div>
</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing and Configuring SQL-Based Queue Engine for Kannel (Sqlbox)]]></title>
    <link href="http://eshaiju.github.io/blog/2013/10/31/installing-and-configuring-sql-based/"/>
    <updated>2013-10-31T00:57:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2013/10/31/installing-and-configuring-sql-based</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
  Sqlbox is a special Kannel box that sits between bearerbox and smsbox and uses a database queue to store and forward messages.Messages are queued on a configurable table (defaults to send_sms) and moved to another table (defaults to sent_sms) afterwards.
  <br />
  After installing gateway, we need to compile Sqlbox.
  <br />
  Steps:<br /><br />&nbsp;
  1 - cd into directory where Kannel is unzipped and then type the following commands<br />
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd addons/sqlbox/
</span><span class='line'>sudo ./bootstrap
</span><span class='line'>sudo ./configure --with-kannel-dir=/usr/local/kannel-1.5.0/
</span><span class='line'>sudo make bindir=/usr/local/kannel/kannel-1.5.0/</span></code></pre></td></tr></table></div></figure></notextile></div>
  2 -Create a file named smsbox.conf and following configuration
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#SQL BOX CONFIG
</span><span class='line'>
</span><span class='line'>group = sqlbox
</span><span class='line'>id = sqlbox-db
</span><span class='line'>smsbox-id = sqlbox
</span><span class='line'>global-sender = ""
</span><span class='line'>bearerbox-host = localhost
</span><span class='line'>bearerbox-port = 13010
</span><span class='line'>smsbox-port = 13020
</span><span class='line'>smsbox-port-ssl = false
</span><span class='line'>sql-log-table = sent_sms
</span><span class='line'>sql-insert-table = send_sms
</span><span class='line'>log-file = "/var/log/kannel/kannel-sqlbox.log"
</span><span class='line'>
</span><span class='line'># Database connection examples. Please uncomment as needed
</span><span class='line'># Example MYSQL Connection
</span><span class='line'>
</span><span class='line'>group = mysql-connection
</span><span class='line'>id = sqlbox-db
</span><span class='line'>host = localhost
</span><span class='line'>username = username
</span><span class='line'>password = password
</span><span class='line'>database = kannel_db</span></code></pre></td></tr></table></div></figure></notextile></div>

3 - create &nbsp;send_sms table using following sql command
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `send_sms` (
</span><span class='line'>                          `sql_id` bigint(20) NOT NULL auto_increment,
</span><span class='line'>                          `momt` enum('MO','MT') default NULL,
</span><span class='line'>                          `sender` varchar(20) default NULL,
</span><span class='line'>                          `receiver` varchar(20) default NULL,
</span><span class='line'>                          `udhdata` blob,&lt;br />&nbsp; `msgdata` text,
</span><span class='line'>                          `time` bigint(20) default NULL,
</span><span class='line'>                          `smsc_id` varchar(255) default NULL,
</span><span class='line'>                          `service` varchar(255) default NULL,
</span><span class='line'>                          `account` varchar(255) default NULL,
</span><span class='line'>                          `id` bigint(20) default NULL,
</span><span class='line'>                          `sms_type` bigint(20) default NULL,
</span><span class='line'>                          `mclass` bigint(20) default NULL,
</span><span class='line'>                          `mwi` bigint(20) default NULL,
</span><span class='line'>                          `coding` bigint(20) default NULL,
</span><span class='line'>                          `compress` bigint(20) default NULL,
</span><span class='line'>                          `validity` bigint(20) default NULL,
</span><span class='line'>                          `deferred` bigint(20) default NULL,
</span><span class='line'>                          `dlr_mask` bigint(20) default NULL,
</span><span class='line'>                          `dlr_url` varchar(255) default NULL,
</span><span class='line'>                          `pid` bigint(20) default NULL,
</span><span class='line'>                          `alt_dcs` bigint(20) default NULL,
</span><span class='line'>                          `rpi` bigint(20) default NULL,
</span><span class='line'>                          `charset` varchar(255) default NULL,
</span><span class='line'>                          `boxc_id` varchar(255) default NULL,
</span><span class='line'>                          `meta_data` varchar(255) default NULL,
</span><span class='line'>                          `foreign_id` bigint(20) default NULL,
</span><span class='line'>                          `binfo` varchar(255) default NULL,
</span><span class='line'>                          PRIMARY KEY (`sql_id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure></notextile></div>

4 - Create &nbsp;sent_sms table using same structure with changing table name <br />
Now start bearerbox and sqlbox using commands
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /usr/local/kannel-1.5.0/sbin bearerbox /home/shaiju/kannel/kannel.conf
</span><span class='line'>sudo /usr/local/kannel-1.5.0/sbin sqlbox /home/shaiju/kannel/sqlbox.conf</span></code></pre></td></tr></table></div></figure></notextile></div>
Example<br />
As when you're using the sendsms interface, you don't need to specify all the columns in order to succesfully enqueue a message.<br />
Here's an example query you can use to send a simple message using Sqlbox:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO send_sms ( &nbsp;momt, sender, receiver, msgdata, sms_type, smsc_id) VALUES ( &nbsp;'MT', 'TESTID', '9995323922', 'Hello world', 2,'testsmsc1');</span></code></pre></td></tr></table></div></figure></notextile></div>
The former example would send a message with text "Hello world" to number "9995323922". If possible, the sender would be set to "TESTID".You can add other parameters to specify routing, charset encoding and any other settings your setup may require<br />
If you are keen to learn more about this , Refer <a href="http://www.blogalex.com/wp-content/uploads/2008/11/userguide.html">Here</a><br />
</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kannel Monitoring Tool - Ruby Gem]]></title>
    <link href="http://eshaiju.github.io/blog/2013/10/03/kannel-monitoring-tool-ruby-gem/"/>
    <updated>2013-10-03T23:47:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2013/10/03/kannel-monitoring-tool-ruby-gem</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
  <div>Last few months I have been facing lots of issues in kannel SMS gateway.Some time sms are getting queued up, in some other time smsc went to reconnecting stage. I searched for a tool which will monitor kannel status Unfortunately i didn't find a tool to monitor and give alert. so decided to write a tool which will monitor kannel activities.</div>
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kannel_monitor 0.0.2</span></code></pre></td></tr></table></div></figure></notextile></div>
  This gem will monitor<br />
  <ul>
    <li>&nbsp; &nbsp;kannel status</li>
    <li>&nbsp; &nbsp;kannel sms queue</li>
    <li>&nbsp; &nbsp;smsc status</li>
    <li>&nbsp; &nbsp;smsc queue and will send a email alerts when something went wrong.</li>
  </ul>
  Just install gem in server using 
    <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install kannel_monitor</span></code></pre></td></tr></table></div></figure></notextile></div>
  run monitoring activity using command 
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kannel_monitor 'path to kannel_monitor.yml'</span></code></pre></td></tr></table></div></figure></notextile></div>
   Example of <b>yml</b> file is given&nbsp;<b><a href="https://github.com/shaijunonu/kannel-monitor/blob/master/config/kannel_monitor.yml" style="color: #1155cc;">Here</a>.
   </b><br /><span>you need to set a crone job to run this in a specific intervals. If a smsc is permanently reconection stage and you don't want to monitor that smsc, then you can skip that particular smsc by adding in <b>sms_to_be_skipped&nbsp;</b></span>
</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring MySQL DLR Storage]]></title>
    <link href="http://eshaiju.github.io/blog/2013/09/09/configuring-mysql-dlr-storage/"/>
    <updated>2013-09-09T18:45:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2013/09/09/configuring-mysql-dlr-storage</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">To support mysql, we have to recompile kannel with --mysql 
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --prefix=/usr/local/kannel --with-mysql</span></code></pre></td></tr></table></div></figure></notextile></div>
To store DLR information into a MySQL database you may use the dlr-storage = mysql configuration directive in the core group.In addition to that you must have a dlr-db group defined that specifies the table field names that are used to the DLR attributes and a mysql-connection group that defines the connection to the MySQL server itself.
<br/>
Here is the example configuration
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group = core
</span><span class='line'>.........
</span><span class='line'>dlr-storage = mysql
</span><span class='line'>group = mysql-connection
</span><span class='line'>id = mydlr
</span><span class='line'>host = localhost
</span><span class='line'>username = foo
</span><span class='line'>password = bar
</span><span class='line'>database = dlr
</span><span class='line'>max-connections = 1
</span><span class='line'>group = dlr-db
</span><span class='line'>id = mydlr
</span><span class='line'>table = dlr
</span><span class='line'>field-smsc = smsc
</span><span class='line'>field-timestamp = ts
</span><span class='line'>field-destination = destination
</span><span class='line'>field-source = source
</span><span class='line'>field-service = service
</span><span class='line'>field-url = url
</span><span class='line'>field-mask = mask
</span><span class='line'>field-status = status
</span><span class='line'>field-boxc-id = boxc</span></code></pre></td></tr></table></div></figure></notextile></div>
Create table dlr<br /><br />
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE dlr (smsc varchar(40),
</span><span class='line'>                  ts varchar(40),
</span><span class='line'>                  destination varchar(40),
</span><span class='line'>                  source varchar(40),
</span><span class='line'>                  service varchar(40),
</span><span class='line'>                  url varchar(255),
</span><span class='line'>                  mask int(10),
</span><span class='line'>                  status int(10),
</span><span class='line'>                  boxc varchar(40))</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kannel Installation and Configuration as SMS Gateway Server]]></title>
    <link href="http://eshaiju.github.io/blog/2013/09/01/kannel-installation-and-configuration/"/>
    <updated>2013-09-01T17:53:00+05:30</updated>
    <id>http://eshaiju.github.io/blog/2013/09/01/kannel-installation-and-configuration</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Kannel is an open source WAP gateway and &nbsp;SMS gateway for GSM networks. &nbsp;The main use for Kannel is to link HTTP based services to various SMS centers using obscure protocols.Kannel is mainly being developed on Linux systems, and should be fairly easy to port to other Unix-like systems. However, kannel don't yet support other platforms.<br /><br /><b>Kannel Installation and Configuration as SMS gateway Server</b><br /><b>Installation</b><br />1 Before installing kannel you will need to install libxml. Download the source and follow the next steps for installation.We can download it from following link.<span style="color: #7a7a7a;">&nbsp;</span><a href="ftp://gd.tuwien.ac.at/pub/libxml/" style="background-color: white; border: 0px; color: #f3686d; font-family: Georgia, Times, serif; font-size: 14px; line-height: 21px; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;" target="_blank">ftp://gd.tuwien.ac.at/pub/libxml/</a><br />2 Unzip it into some directory<br />3 Cd into directory where libxml is unzipped and then type the following commands<br />4 Type ./configure<br />5 Type make<br />6 Type make install<br />&nbsp; &nbsp;now you have libxml<br />7 Download latest version of Kannel <a href="http://www.kannel.org/download.shtml">http://www.kannel.org/download.shtml</a>&nbsp;and Unzip it into some directory &nbsp;or use svn co </span><a href="https://svn.kannel.org/gateway/trunk" style="white-space: pre-wrap;">https://svn.kannel.org/gateway/trunk</a>&nbsp; <span style="white-space: pre-wrap;"> to download latest version of gateway</span><br />8 cd into directory where Kannel is unzipped and then type the following commands<br />9 Type &nbsp;<span style="white-space: pre-wrap;">./configure --prefix=/usr/local/kannel-1.5.0 </span><span style="white-space: pre-wrap;">--enable-start-stop-daemon --with-mysql</span><br />10 Type make<br />11 Type make install<br /><br />&nbsp;Now kannel is ready<br /><br />Next step is to add configuration<br /><br />Kannel consists of three programs, usually run as &nbsp;daemons: &nbsp;bearerbox, wapbox, and smsbox. They implement the connection to the phone (SMS or UDP), the WAP protocol stack, and the SMS based services, respectively.<br /><br />We will need only &nbsp;bearerbox and smsbox as we are going to setup it as SMS gateway server. Bearerbox is the main queue and smsbox handles the smscs.<br /><br />Create a file named kannel.conf and add following configuration<br /><br />

  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#---------------------------------------------
</span><span class='line'># CORE
</span><span class='line'>#
</span><span class='line'># There is only one core group and it sets all basic settings of the bearerbox (and system).
</span><span class='line'>group = core
</span><span class='line'>admin-port = 13000
</span><span class='line'>admin-password = passwd##
</span><span class='line'>smsbox-port = 13010
</span><span class='line'>log-file = "/var/log/kannel/kannel.log"
</span><span class='line'># Log level is DEBUG
</span><span class='line'>log-level = 
</span><span class='line'>access-log = "/var/log/kannel/access.log"
</span><span class='line'>store-type = spool
</span><span class='line'># Let no SMS be lost as far as possible
</span><span class='line'>store-location = "/var/spool/kannel"
</span><span class='line'># Acceptable retries for temporary failures in sending SMS
</span><span class='line'>sms-resend-retry = 3
</span><span class='line'>#---------------------------------------------
</span><span class='line'># SMSBOX SETUP
</span><span class='line'>#
</span><span class='line'># Smsbox(es) do higher-level SMS handling after they have been received from SMS centers by #bearerbox, or before they are given to bearerbox for delivery
</span><span class='line'>group = smsbox
</span><span class='line'>bearerbox-host = localhost
</span><span class='line'>sendsms-port = 13020
</span><span class='line'>log-file = "/var/log/kannel/smsbox.log"
</span><span class='line'># Log level is DEBUG
</span><span class='line'>log-level = 0
</span><span class='line'>access-log = "/var/log/kannel/access.log"
</span><span class='line'>#---------------------------------------------
</span><span class='line'># SEND-SMS USERS
</span><span class='line'># These users are used when Kannel smsbox sendsms interface is used to send PUSH sms messages
</span><span class='line'>group = sendsms-user
</span><span class='line'>username = tester
</span><span class='line'>password = foobar
</span><span class='line'>concatenation = true
</span><span class='line'>max-messages = 4
</span><span class='line'>#---------------------------------------------
</span><span class='line'># SMSC CONNECTIONS
</span><span class='line'># SMSC connections are created in bearerbox and they handle SMSC 
</span><span class='line'># protocol and message relying.
</span><span class='line'># Example complete configuration
</span><span class='line'>group = smsc
</span><span class='line'>smsc = smpp
</span><span class='line'>smsc-id = PROMO-SERVICE-MESSAGE
</span><span class='line'>allowed-smsc-id = PROMO-SERVICE-MESSAGE
</span><span class='line'>host = X.X.X.X
</span><span class='line'>port = XXXX
</span><span class='line'>transceiver-mode = true
</span><span class='line'>smsc-username = promouser
</span><span class='line'>smsc-password = promopasswd
</span><span class='line'>source-addr-ton = 0
</span><span class='line'>source-addr-npi = 1
</span><span class='line'>dest-addr-ton = 0
</span><span class='line'>dest-addr-npi = 1
</span><span class='line'>system-type = ""
</span><span class='line'>address-range = ""</span></code></pre></td></tr></table></div></figure></notextile></div>
  Now start smsbox and bearerbox using 
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /usr/local/kannel-1.5.0/sbin/bearerbox /home/shaiju/kannel/kannel.conf
</span><span class='line'>sudo /usr/local/kannel-1.5.0/sbin/smsbox /home/shaiju/kannel/kannel.conf</span></code></pre></td></tr></table></div></figure></notextile></div>
To see running process use
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ps -ef | grep kannel</span></code></pre></td></tr></table></div></figure></notextile></div>
To stop the kannel service
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/kannel stop</span></code></pre></td></tr></table></div></figure></notextile></div>
To see kannel logs
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail -f /var/log/kannel/kannel.log</span></code></pre></td></tr></table></div></figure></notextile></div>
Now you can send sms using send sms url
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://kannel.machine.ip:13010/cgi-bin/sendsms?username=tester&amp;password=foobar&amp;from=SENDERID&amp;to=9999999999&amp;text=test sms &amp;smsc=PROMO-SERVICE-MESSAGE</span></code></pre></td></tr></table></div></figure></notextile></div>
If you are keen to learn more about this , Refer&nbsp;</span><a href="http://www.kannel.org/download/1.5.0/userguide-1.5.0/userguide.html" >Here</a><br />For Sample kannel configuration, check <a href="http://www.kannel.org/download/1.4.1/gateway-1.4.1/gw/smskannel.conf">Here</a><br /><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anthony</div>
<div class='content'>
Thanks for this. The send SMS from kannel is not any troublesome. Would you do a guide on receiving SMSs? I have tried everything and but still I cannot received SMS from the same e220 modem that works fine sending from kannel. Thanks again, you guide so far has been very usefull</div>
</div>
<div class='comment'>
<div class='author'>Sreekanth G S</div>
<div class='content'>
Start bearerbox first. Smsbox needs to connect to an already running bearerbox instance. </div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
